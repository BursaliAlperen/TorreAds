Ä°steÄŸiniz Ã¼zerine, sadece reklam izleme gÃ¶revi ve yeni reklam kodu ile gÃ¼ncellenmiÅŸ kullanÄ±cÄ± uygulamasÄ± (earnigcode.txt) ve admin panelinin (earnigadmin.txt) tam kodlarÄ±nÄ± aÅŸaÄŸÄ±da bulabilirsiniz.
1. KullanÄ±cÄ± UygulamasÄ± - earnigcode.txt (GÃ¼ncellenmiÅŸ)
Bu kodda:
 * GigaPub Ad Kodu <head> etiketine eklendi.
 * Alt MenÃ¼ (Bottom Nav) sadece REKLAM Ä°ZLEME linkini iÃ§erecek ÅŸekilde ayarlandÄ±.
 * Ana Sayfa (Home Page) sadece tek bir Ã–dÃ¼llÃ¼ Reklam Ä°zle gÃ¶revi gÃ¶sterecek ÅŸekilde basitleÅŸtirildi.
 * Gereksiz cÃ¼zdan, referans ve eski gÃ¶rev kodlarÄ± ile ilgili tÃ¼m JavaScript fonksiyonlarÄ± ve HTML kodlarÄ± kaldÄ±rÄ±ldÄ±.
 * claimReward fonksiyonu, yeni window.showGiga() API'si ile Ã§alÄ±ÅŸacak ÅŸekilde gÃ¼ncellendi.
<!-- end list -->
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>CashReward App</title>
    
    <script src="https://ad.gigapub.tech/script?id=986"></script>
    
    <script src="https://cdn.tailwindcss.com"></script>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
    <script src="https://unpkg.com/lucide@latest"></script>
    <style>
        body { font-family: 'Inter', sans-serif; background-color: #121212; color: #ffffff; }
        .dark-bg { background-color: #121212; }
        .card-bg { background-color: #1e1e1e; }
        .border-accent { border-color: #ff8c00; }
        .text-accent { color: #ff8c00; }
        .btn, .btn-accent, .btn-outline-accent { transition: all 0.2s ease-in-out; transform: scale(1); }
        .btn:active, .btn-accent:active, .btn-outline-accent:active { transform: scale(0.95); }
        .btn-accent { background-color: #ff8c00; color: #121212; font-weight: bold; }
        .btn-accent:hover { background-color: #e67e00; }
        .btn-outline-accent { border: 1px solid #ff8c00; color: #ff8c00; }
        .btn-outline-accent:hover { background-color: #ff8c00; color: #121212; }
        .input-field { background-color: #2c2c2c; border: 1px solid #444; }
        .main-page { display: none; }
        .main-page.active { display: flex; animation: fadeIn 0.5s ease-in-out; }
        .sub-page { display: none; }
        .sub-page.active { display: block; animation: fadeIn 0.3s ease-in-out; }
        .bottom-nav a.active { color: #ff8c00; }
        .notification-dot {
            position: absolute; top: -2px; right: -2px; width: 10px; height: 10px;
            background-color: #ef4444; border-radius: 50%; border: 2px solid #121212; display: none;
        }
        @keyframes fadeIn { from { opacity: 0; } to { opacity: 1; } }
    </style>
</head>
<body class="max-w-md mx-auto">

    <div id="loader" class="hidden fixed inset-0 dark-bg bg-opacity-75 flex items-center justify-center z-50">
        <div class="animate-spin rounded-full h-16 w-16 border-t-2 border-b-2 border-accent"></div>
    </div>

    <div id="auth-section" class="min-h-screen p-6 flex-col justify-center main-page">
        <h1 class="text-4xl font-bold text-center mb-2 text-accent">CashReward</h1>
        <p class="text-center text-gray-400 mb-8">Jaari rakhne ke liye Login ya Signup karein</p>
     
        <div id="auth-container">
            <div id="login-view">
                <input id="login-email" type="email" placeholder="Email" class="w-full p-3 rounded-lg input-field mb-4">
                <input id="login-password" type="password" placeholder="Password" class="w-full p-3 rounded-lg input-field mb-4">
                <button id="login-btn" class="w-full p-3 rounded-lg btn-accent mb-4">Login</button>
             
                <p class="text-center text-gray-400">Account nahi hai? <a href="#" id="show-signup" class="font-semibold text-accent">Sign Up</a></p>
            </div>
            <div id="signup-view" class="hidden">
                 <input id="signup-name" type="text" placeholder="Poora Naam" class="w-full p-3 rounded-lg input-field mb-4">
                <input id="signup-email" type="email" placeholder="Email" class="w-full p-3 rounded-lg input-field mb-4">
           
                <input id="signup-password" type="password" placeholder="Password" class="w-full p-3 rounded-lg input-field mb-4">
                <button id="signup-btn" class="w-full p-3 rounded-lg btn-accent mb-4">Sign Up</button>
                <p class="text-center text-gray-400">Pehle se account hai? <a href="#" id="show-login" class="font-semibold text-accent">Login</a></p>
            </div>
        </div>
    </div>

    <div id="app-container" class="min-h-screen flex-col main-page">
        <header class="flex items-center justify-between p-4 sticky top-0 bg-opacity-80 backdrop-blur-md z-10 dark-bg">
            <h1 class="text-xl font-bold">CashReward</h1>
            <div class="flex items-center space-x-4">
         
                <div id="notification-bell" class="relative cursor-pointer" onclick="navigateTo('notifications-page')">
                    <i data-lucide="bell" class="w-6 h-6"></i>
                    <div id="notification-dot" class="notification-dot"></div>
                </div>
                <button id="logout-btn-header" class="btn btn-outline-accent text-xs px-3 py-1 rounded-lg">Ã‡Ä±kÄ±ÅŸ Yap</button>
            </div>
        </header>

        <main class="flex-grow">
            <div id="home-page" class="p-4 space-y-6 sub-page active">
                <div class="card-bg p-4 rounded-lg flex items-center justify-between">
                    <div>
      
                        <p class="text-gray-400 text-sm">Your Balance</p>
                        <p class="text-3xl font-bold"><span id="coin-balance">0</span> Coins</p>
                    </div>
                    </div>
                
                <section class="space-y-6">
                    <div class="flex justify-between items-center">
                        <h2 class="text-xl font-bold">Tek GÃ¶rev: Reklam Ä°zle</h2>
                        <p class="text-sm text-gray-400">Kalan Reklam: <span id="ads-left-count">...</span></p>
                    </div>
                    <div class="card-bg p-4 rounded-lg flex items-center justify-between">
                        <div class="flex items-center space-x-4">
                            <span class="text-4xl">ðŸ’°</span>
                            <div>
                                <h3 class="font-bold text-lg">Ã–dÃ¼llÃ¼ ReklamÄ± Ä°zle</h3>
                                <p class="text-sm text-gray-400">Hemen 50 Coin kazan!</p>
                            </div>
                        </div>
                        <button class="btn-accent font-bold px-6 py-3 rounded-lg text-base" onclick="claimReward('gigaPub')">REKLAM Ä°ZLE</button>
                    </div>
                </section>
         
            </div>

            <div id="notifications-page" class="p-4 space-y-4 sub-page">
                <h2 class="text-xl font-bold text-center">Notifications</h2>
                <div id="notifications-list" class="space-y-3"></div>
            </div>
            
            </main>

        <nav class="bottom-nav sticky bottom-0 grid grid-cols-1 items-center text-center py-2 card-bg">
            <a href="#" class="nav-link active" data-page="home-page" style="color: #ff8c00;">
                <i data-lucide="monitor" class="mx-auto w-6 h-6"></i>
                <span class="text-base font-bold">REKLAM Ä°ZLEME</span>
            </a>
        </nav>
 
    </div>
    
    <div id="custom-alert" class="hidden fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
        <div class="bg-gray-800 rounded-lg p-6 w-full max-w-sm text-center">
            <p id="alert-message" class="mb-4"></p>
            <button id="alert-ok-btn" class="btn-accent px-6 py-2 rounded-lg">OK</button>
        </div>
    </div>

    <script type="module">
        const firebaseConfig = {
     
            apiKey: "AIzaSyAjdPczpLlBINxzGQ1dvwDRlvZpdUCfKUk",
            authDomain: "earningapp-c292c.firebaseapp.com",
            projectId: "earningapp-c292c",
            storageBucket: "earningapp-c292c.appspot.com",
            messagingSenderId: "81626520266",
            appId: "1:81626520266:web:af31f7d303477a3d973233"
        };
        import { initializeApp } from "https://www.gstatic.com/firebasejs/9.23.0/firebase-app.js";
        import { getAuth, onAuthStateChanged, createUserWithEmailAndPassword, signInWithEmailAndPassword, signOut } from "https://www.gstatic.com/firebasejs/9.23.0/firebase-auth.js";
        import { getFirestore, doc, setDoc, getDoc, updateDoc, collection, serverTimestamp, query, where, getDocs, limit } from "https://www.gstatic.com/firebasejs/9.23.0/firebase-firestore.js";
        const app = initializeApp(firebaseConfig);
        const auth = getAuth(app);
        const db = getFirestore(app);

        let currentUser = null;
        let userData = null;
        let appConfig = {};

        const loader = document.getElementById('loader');
        const coinBalanceEl = document.getElementById('coin-balance');
        // const walletCoinBalanceEl = document.getElementById('wallet-coin-balance'); // KaldÄ±rÄ±ldÄ±
        // const profileNameEl = document.getElementById('profile-name'); // KaldÄ±rÄ±ldÄ±
        // const profileEmailEl = document.getElementById('profile-email'); // KaldÄ±rÄ±ldÄ±
        const notificationDot = document.getElementById('notification-dot');
        const adsLeftCountEl = document.getElementById('ads-left-count');
        
        window.onload = () => {
            lucide.createIcons();
            setupEventListeners();
            showMainPage('auth-section');
            loader.style.display = 'none';
            onAuthStateChanged(auth, handleAuthStateChange);
        };

        async function handleAuthStateChange(user) {
            if (user) {
                loader.style.display = 'flex';
                currentUser = user;
                await fetchUserData();
                if (userData.isBlocked) {
                    showAlert("Aapka account block kar diya gaya hai.");
                    await signOut(auth);
                    loader.style.display = 'none';
                    return;
                }
                await fetchAppConfig();
                await checkNewNotifications();
                updateUI();
                showMainPage('app-container');
                navigateTo('home-page');
                loader.style.display = 'none';
            } else {
                currentUser = null;
                userData = null;
                showMainPage('auth-section');
            }
        }

        async function fetchUserData() {
            if (!currentUser) return;
            const userRef = doc(db, "users", currentUser.uid);
            try {
                const userSnap = await getDoc(userRef);
                if (userSnap.exists()) {
                    userData = userSnap.data();
                } else {
                    const ownReferralCode = Math.random().toString(36).substring(2, 8).toUpperCase();
                    const defaultUserData = {
                        uid: currentUser.uid, name: currentUser.email.split('@')[0], email: currentUser.email,
                        balance: 50, referralCode: ownReferralCode, referredBy: null,
                        lastNotificationCheck: new Date(),
                        createdAt: serverTimestamp(),
                        dailyAdCount: 0, lastAdWatchDate: new Date().toISOString().split('T')[0], isBlocked: false
                    };
                    await setDoc(userRef, defaultUserData);
                    userData = defaultUserData;
                }
            } catch (error) {
                console.error("Error fetching user data:", error);
                showAlert("User data load karne mein error aayi.");
            }
        }

        async function fetchAppConfig() {
            const configRef = doc(db, "config", "main");
            try {
                const configSnap = await getDoc(configRef);
                appConfig = configSnap.exists() ? configSnap.data() : { minWithdrawal: 5000, paymentMethods: ["UPI", "Paytm"], dailyAdLimit: 10, coinValueCoins: 1000, coinValueInr: 10 };
            } catch (error) {
                console.error("Error fetching app config:", error);
            }
        }
        
        function updateUI() {
            if (!userData) return;
            const balance = userData.balance || 0;
            coinBalanceEl.textContent = balance;
            updateAdsLeftCount();
        }

        function updateBalance(amount) {
             if (!userData) return;
             userData.balance = (userData.balance || 0) + amount;
             updateUI();
        }

        function updateAdsLeftCount() {
            const today = new Date().toISOString().split('T')[0];
            if (userData.lastAdWatchDate !== today) {
                userData.dailyAdCount = 0;
            }
            const adsLeft = Math.max(0, (appConfig.dailyAdLimit || 10) - userData.dailyAdCount);
            adsLeftCountEl.textContent = adsLeft;
        }

        function showMainPage(pageId) {
            document.querySelectorAll('.main-page').forEach(p => p.classList.remove('active'));
            document.getElementById(pageId).classList.add('active');
        }

        function navigateTo(pageId) {
            document.querySelectorAll('.sub-page').forEach(p => p.classList.remove('active'));
            const pageEl = document.getElementById(pageId);
            if (pageEl) pageEl.classList.add('active');

            document.querySelectorAll('.nav-link').forEach(link => {
                link.classList.remove('active', 'text-accent');
                // Sadece home-page linki var
                if (link.dataset.page === 'home-page') link.classList.add('active', 'text-accent');
            });
        }
        window.navigateTo = navigateTo;

        function setupEventListeners() {
            document.getElementById('show-signup').addEventListener('click', (e) => {
                e.preventDefault();
                document.getElementById('login-view').classList.add('hidden');
                document.getElementById('signup-view').classList.remove('hidden');
            });
            document.getElementById('show-login').addEventListener('click', (e) => {
                e.preventDefault();
                document.getElementById('signup-view').classList.add('hidden');
                document.getElementById('login-view').classList.remove('hidden');
            });
            document.getElementById('signup-btn').addEventListener('click', handleSignup);
            document.getElementById('login-btn').addEventListener('click', handleLogin);
            
            // Yeni Ã§Ä±kÄ±ÅŸ butonu dinleyicisi
            document.getElementById('logout-btn-header').addEventListener('click', handleLogout); 
            
            // Alt menÃ¼ sadece home-page'e gidiyor
            document.querySelectorAll('.bottom-nav .nav-link').forEach(link => { 
                link.addEventListener('click', (e) => { 
                    e.preventDefault(); 
                    navigateTo(link.dataset.page); 
                }); 
            });

            // Sadece bildirim zili dinleyicisi
            document.getElementById('notification-bell').addEventListener('click', () => { 
                navigateTo('notifications-page'); 
                loadNotifications(); 
            });
        }

        async function handleSignup() {
            const name = document.getElementById('signup-name').value;
            const email = document.getElementById('signup-email').value;
            const password = document.getElementById('signup-password').value;
            if (!name || !email || !password) return showAlert("Kripya sabhi fields bharein.");
            loader.style.display = 'flex';
            try {
                await createUserWithEmailAndPassword(auth, email, password);
            } catch (error) {
                showAlert(error.message);
                loader.style.display = 'none';
            }
        }

        async function handleLogin() {
            const email = document.getElementById('login-email').value;
            const password = document.getElementById('login-password').value;
            if (!email || !password) return showAlert("Kripya email aur password daalein.");
            loader.style.display = 'flex';
            try {
                await signInWithEmailAndPassword(auth, email, password);
            } catch (error) {
                showAlert(error.message);
                loader.style.display = 'none';
            }
        }

        async function handleLogout() {
            await signOut(auth);
        }

        async function checkNewNotifications() {
            const lastCheck = userData.lastNotificationCheck;
            if (!lastCheck || typeof lastCheck.seconds === 'undefined') { 
                console.log("lastNotificationCheck is not a valid timestamp yet. Skipping check."); 
                return;
            }
            const q = query(collection(db, "notifications"), where("createdAt", ">", lastCheck), limit(1));
            const querySnapshot = await getDocs(q);
            notificationDot.style.display = querySnapshot.empty ? 'none' : 'block';
        }

        async function loadNotifications() {
            notificationDot.style.display = 'none';
            if (currentUser) {
                // Son bildirim kontrol zamanÄ±nÄ± gÃ¼ncelle
                await updateDoc(doc(db, "users", currentUser.uid), { lastNotificationCheck: new Date() });
            }

            const notificationsList = document.getElementById('notifications-list');
            notificationsList.innerHTML = '';
            const q = query(collection(db, "notifications"), limit(10));
            const querySnapshot = await getDocs(q);

            if (querySnapshot.empty) {
                notificationsList.innerHTML = '<p class="text-center text-gray-400">HiÃ§ bildirim yok.</p>';
                return;
            }

            querySnapshot.forEach(doc => {
                const notif = doc.data();
                const date = notif.createdAt ? notif.createdAt.toDate().toLocaleDateString() : 'N/A';
                const notifHtml = `
                    <div class="card-bg p-4 rounded-lg">
                        <h3 class="font-bold text-accent">${notif.title}</h3>
                        <p class="text-sm text-gray-300 mt-1">${notif.message}</p>
                        <p class="text-xs text-gray-500 mt-2">${date}</p>
                    </div>
                `;
                notificationsList.innerHTML += notifHtml;
            });
        }
        
        // YENÄ° GigaPub Ad Kodunu kullanan claimReward fonksiyonu
        window.claimReward = async (taskType) => {
            // Sadece GigaPub reklamÄ±nÄ± kabul et
            if (taskType !== 'gigaPub') return;

            const today = new Date().toISOString().split('T')[0];
            if (userData.lastAdWatchDate !== today) {
                userData.dailyAdCount = 0;
            }

            // Limit check
            const dailyLimit = appConfig.dailyAdLimit || 10;
            const adsLeft = Math.max(0, dailyLimit - userData.dailyAdCount);
            if (adsLeft <= 0) {
                return showAlert("BugÃ¼nÃ¼n reklam izleme limitini doldurdunuz. YarÄ±n tekrar deneyin.");
            }

            loader.style.display = 'flex';
            const rewardAmount = 50; 
            const userRef = doc(db, "users", currentUser.uid);

            // GigaPub Reklam Kodunu Ã‡aÄŸÄ±r
            window.showGiga()
                .then(async () => {
                    // SayaÃ§ gÃ¼ncelleme
                    const newCount = (userData.dailyAdCount || 0) + 1;
                    
                    // Firestore'u gÃ¼ncelle: hem sayaÃ§ hem de bakiye gÃ¼ncellenir
                    await updateDoc(userRef, { 
                        balance: (userData.balance || 0) + rewardAmount,
                        dailyAdCount: newCount,
                        lastAdWatchDate: today 
                    });
                    
                    // Yerel veriyi gÃ¼ncelle
                    userData.dailyAdCount = newCount;
                    userData.lastAdWatchDate = today;
                    
                    updateBalance(rewardAmount); // Bakiye gÃ¼ncelleme

                    showAlert(`Tebrikler! ${rewardAmount} Coin kazandÄ±nÄ±z.`);
                    updateAdsLeftCount(); // SayacÄ± gÃ¼ncellediÄŸimizden emin ol
                })
                .catch(e => {
                    console.error("Ad error:", e);
                    // Reklam yÃ¼klenemedi veya kullanÄ±cÄ± kapattÄ±. GigaPub'Ä±n hata yÃ¶netimine uygun
                    showAlert('Reklam yÃ¼klenemedi veya iptal edildi. LÃ¼tfen tekrar deneyin.'); 
                })
                .finally(() => {
                    loader.style.display = 'none';
                });
        }

        function showAlert(message) {
            document.getElementById('alert-message').textContent = message;
            document.getElementById('custom-alert').classList.remove('hidden');
            document.getElementById('alert-ok-btn').onclick = () => {
                document.getElementById('custom-alert').classList.add('hidden');
            };
        }
        window.showAlert = showAlert;

    </script>
</body>
</html>

2. Admin Paneli - earnigadmin.txt (Orijinal Kod)
Admin paneli kodunuz, isteÄŸiniz olan KullanÄ±cÄ±lar (Users) ve Talepler (Withdrawals) sayfalarÄ±nÄ± zaten iÃ§erdiÄŸi iÃ§in bu dosya Ã¼zerinde bir deÄŸiÅŸiklik yapÄ±lmamÄ±ÅŸtÄ±r.
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>CashReward Admin Panel</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
    <script src="https://unpkg.com/lucide@latest"></script>
    <style>
        body { font-family: 'Inter', sans-serif; background-color: #f3f4f6; }
        .sidebar { background-color: #1f2937; color: #d1d5db; }
        .sidebar a { border-left: 3px solid transparent; transition: all 0.2s; }
        .sidebar a:hover { background-color: #374151; }
        .sidebar a.active { background-color: #4f46e5; color: white; border-left-color: #818cf8; }
        .stat-card { background-color: white; border-radius: 0.5rem; box-shadow: 0 1px 3px 0 rgba(0, 0, 0, 0.1), 0 1px 2px 0 rgba(0, 0, 0, 0.06); }
        .page { display: none; }
        .page.active { display: block; animation: fadeIn 0.5s; }
        .btn { padding: 0.5rem 1rem; border-radius: 0.375rem; font-weight: 600; transition: all 0.2s; }
        .btn:active { transform: scale(0.95); }
        .btn-primary { background-color: #4f46e5; color: white; }
        .btn-primary:hover { background-color: #4338ca; }
        .btn-success { background-color: #10b981; color: white; }
        .btn-danger { background-color: #ef4444; color: white; }
        .btn-warning { background-color: #f59e0b; color: white; }
        table { width: 100%; border-collapse: collapse; }
        th, td { padding: 0.75rem; text-align: left; border-bottom: 1px solid #e5e7eb; }
        th { background-color: #f9fafb; }
        @keyframes fadeIn { from { opacity: 0; } to { opacity: 1; } }
    </style>
</head>
<body>

    <div id="admin-login-view" class="min-h-screen flex items-center justify-center bg-gray-100">
        <div class="w-full max-w-md p-8 space-y-6 bg-white rounded-lg shadow-md">
            <h1 class="text-3xl font-bold text-center text-gray-900">Admin Panel Login</h1>
            <input id="admin-email" type="email" placeholder="Admin Email" class="w-full px-4 py-2 border rounded-lg">
            <input id="admin-password" type="password" placeholder="Password" class="w-full px-4 py-2 border rounded-lg">
    
            <button id="admin-login-btn" class="w-full btn btn-primary">Login</button>
        </div>
    </div>

    <div id="admin-dashboard" class="hidden">
        <div class="flex h-screen">
            <aside class="sidebar w-64 flex-shrink-0">
                <div class="p-4 text-2xl font-bold text-white">CashReward</div>
   
                <nav class="mt-8">
                    <a href="#" class="nav-link block py-3 px-4" data-page="dashboard-page"><i data-lucide="home" class="inline-block w-5 h-5 mr-2"></i>Dashboard</a>
                    <a href="#" class="nav-link block py-3 px-4" data-page="users-page"><i data-lucide="users" class="inline-block w-5 h-5 mr-2"></i>Users</a>
                    <a href="#" class="nav-link block py-3 px-4" data-page="withdrawals-page"><i data-lucide="dollar-sign" class="inline-block w-5 h-5 mr-2"></i>Withdrawals</a>
                    <a href="#" class="nav-link block py-3 px-4" data-page="notifications-page"><i data-lucide="send" class="inline-block w-5 h-5 mr-2"></i>Notifications</a>
                    <a href="#" class="nav-link block py-3 px-4" data-page="settings-page"><i data-lucide="settings" class="inline-block w-5 h-5 mr-2"></i>Settings</a>
                    <a href="#" id="admin-logout-btn" class="block py-3 px-4 mt-8"><i data-lucide="log-out" class="inline-block w-5 h-5 mr-2"></i>Logout</a>
                </nav>
            </aside>

            <main class="flex-1 p-8 overflow-y-auto">
                <div id="dashboard-page" class="page">
     
                    <h1 class="text-3xl font-bold mb-6">Dashboard</h1>
                    <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                        <div class="stat-card p-6"><h2 class="text-gray-500 text-lg">Total Users</h2><p id="total-users" class="text-4xl font-bold mt-2">0</p></div>
                        <div class="stat-card p-6"><h2 class="text-gray-500 text-lg">Pending Withdrawals</h2><p id="pending-withdrawals" class="text-4xl font-bold mt-2">0</p></div>
                    </div>
                </div>

                <div id="users-page" class="page">
                  
                    <h1 class="text-3xl font-bold mb-6">User Management</h1>
                    <div class="bg-white shadow rounded-lg overflow-x-auto">
                        <table class="min-w-full">
                            <thead><tr><th>Name</th><th>Email</th><th>Balance</th><th>Status</th><th>Actions</th></tr></thead>
                 
                            <tbody id="users-table-body"></tbody>
                        </table>
                    </div>
                </div>

                <div id="withdrawals-page" class="page">
                    <h1 class="text-3xl font-bold mb-6">Withdrawal Requests</h1>
                     <div class="bg-white shadow rounded-lg overflow-x-auto">
                        <table>
                  
                            <thead><tr><th>User Name</th><th>Amount</th><th>Method</th><th>Details</th><th>Requested At</th><th>Actions</th></tr></thead>
                            <tbody id="withdrawals-table-body"></tbody>
                        </table>
                    </div>
               
                </div>

                <div id="notifications-page" class="page">
                    <h1 class="text-3xl font-bold mb-6">Send Notification</h1>
                    <div class="stat-card p-6 max-w-lg">
               
                        <div class="mb-4"><label for="notification-title" class="block font-semibold mb-2">Title</label><input type="text" id="notification-title" class="w-full px-4 py-2 border rounded-lg"></div>
                        <div class="mb-6"><label for="notification-message" class="block font-semibold mb-2">Message</label><textarea id="notification-message" rows="4" class="w-full px-4 py-2 border rounded-lg"></textarea></div>
                        <button id="send-notification-btn" class="btn btn-primary">Send to All Users</button>
             
                    </div>
                </div>

                <div id="settings-page" class="page">
                    <h1 class="text-3xl font-bold mb-6">App Settings</h1>
                
                    <div class="stat-card p-6 max-w-lg">
                        <div class="mb-6"><label for="min-withdrawal" class="block font-semibold mb-2">Minimum Withdrawal (Coins)</label><input type="number" id="min-withdrawal" class="w-full px-4 py-2 border rounded-lg"></div>
                        <div class="mb-6"><label for="daily-ad-limit" class="block font-semibold mb-2">Daily Ad Watch Limit</label><input type="number" id="daily-ad-limit" class="w-full px-4 py-2 border rounded-lg"></div>
                
                        <div class="mb-6">
                            <label class="block font-semibold mb-2">Coin Value</label>
                            <div class="flex items-center space-x-2">
                            
                                <input type="number" id="coin-value-coins" class="w-full px-4 py-2 border rounded-lg">
                                <span>Coins = â‚¹</span>
                                <input type="number" id="coin-value-inr" class="w-full px-4 py-2 border rounded-lg">
                
                            </div>
                        </div>
                        <div class="mb-6"><label class="block font-semibold mb-2">Payment Methods (comma-separated)</label><input type="text" id="payment-methods" class="w-full px-4 py-2 border rounded-lg" placeholder="e.g. UPI,Paytm"></div>
                        <button id="save-settings-btn" class="btn btn-primary">Save Settings</button>
                    </div>
                </div>
            </main>
        </div>
    </div>
    
    <div id="custom-alert" class="hidden fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
        <div class="bg-white rounded-lg p-6 w-full max-w-sm text-center shadow-xl">
            <p id="alert-message" class="mb-4 text-gray-800"></p>
            <button id="alert-ok-btn" class="btn btn-primary px-6">OK</button>
        </div>
    </div>

    <div id="custom-confirm" class="hidden fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
      
        <div class="bg-white rounded-lg p-6 w-full max-w-sm text-center shadow-xl">
            <p id="confirm-message" class="mb-6 text-gray-800"></p>
            <div class="flex justify-center space-x-4">
                <button id="confirm-cancel-btn" class="btn bg-gray-200 text-gray-800 px-6">Cancel</button>
                <button id="confirm-ok-btn" class="btn btn-danger px-6">Confirm</button>
            </div>
        
        </div>
    </div>

    <script type="module">
        const firebaseConfig = {
            apiKey: "AIzaSyAjdPczpLlBINxzGQ1dvwDRlvZpdUCfKUk",
            authDomain: "earningapp-c292c.firebaseapp.com",
            projectId: "earningapp-c292c",
            storageBucket: "earningapp-c292c.appspot.com",
            messagingSenderId: "81626520266",
            appId: "1:81626520266:web:af31f7d303477a3d973233"
  
        };
        
        const ADMIN_UIDS = ["kdGbhVRBZHZi28PcnECRMtNCHrW2"]; 

        import { initializeApp } from "https://www.gstatic.com/firebasejs/9.23.0/firebase-app.js";
        import { getAuth, onAuthStateChanged, signInWithEmailAndPassword, signOut } from "https://www.gstatic.com/firebasejs/9.23.0/firebase-auth.js";
        import { getFirestore, collection, doc, getDoc, setDoc, updateDoc, query, where, onSnapshot, addDoc, serverTimestamp } from "https://www.gstatic.com/firebasejs/9.23.0/firebase-firestore.js";
        const app = initializeApp(firebaseConfig);
        const auth = getAuth(app);
        const db = getFirestore(app);

        const loginView = document.getElementById('admin-login-view');
        const dashboardView = document.getElementById('admin-dashboard');

        window.onload = () => {
            lucide.createIcons();
            setupEventListeners();
            onAuthStateChanged(auth, (user) => {
                if (user && ADMIN_UIDS.includes(user.uid)) {
                    loginView.style.display = 'none';
                    dashboardView.style.display = 'block';
                    navigateTo('dashboard-page');
                    loadDashboardData();
                    loadUsers();
                    loadWithdrawals();
                    loadSettings();
                } else {
                    loginView.style.display = 'flex';
                    dashboardView.style.display = 'none';
                }
            });
        };

        function navigateTo(pageId) {
            document.querySelectorAll('.page').forEach(p => p.classList.remove('active'));
            document.getElementById(pageId).classList.add('active');
            document.querySelectorAll('.nav-link').forEach(link => {
                link.classList.remove('active');
                if (link.dataset.page === pageId) link.classList.add('active');
            });
        }

        function setupEventListeners() {
            document.getElementById('admin-login-btn').addEventListener('click', handleAdminLogin);
            document.getElementById('admin-logout-btn').addEventListener('click', () => signOut(auth));
            document.getElementById('save-settings-btn').addEventListener('click', saveSettings);
            document.getElementById('send-notification-btn').addEventListener('click', sendNotification);
            document.querySelectorAll('.nav-link').forEach(link => {
                link.addEventListener('click', (e) => {
                    e.preventDefault();
                    navigateTo(link.dataset.page);
                });
            });
        }

        async function handleAdminLogin() {
            const email = document.getElementById('admin-email').value;
            const password = document.getElementById('admin-password').value;
            try {
                const userCredential = await signInWithEmailAndPassword(auth, email, password);
                if (!ADMIN_UIDS.includes(userCredential.user.uid)) {
                    await signOut(auth);
                    showAlert("Aap is panel ko access karne ke liye authorized nahi hain.");
                }
            } catch (error) {
                showAlert(error.message);
            }
        }

        function loadDashboardData() {
            onSnapshot(collection(db, "users"), snap => {
                document.getElementById('total-users').textContent = snap.size;
            });
            onSnapshot(query(collection(db, "withdrawals"), where("status", "==", "pending")), snap => {
                document.getElementById('pending-withdrawals').textContent = snap.size;
            });
        }

        function loadUsers() {
            const usersTableBody = document.getElementById('users-table-body');
            onSnapshot(collection(db, "users"), (snapshot) => {
                usersTableBody.innerHTML = '';
                snapshot.forEach(doc => {
                    const user = doc.data();
                    const isBlocked = user.isBlocked || false;
                    const row = `
                        <tr>
                            <td>${user.name || 'N/A'}</td>
                            <td>${user.email}</td>
                            <td>${user.balance || 0}</td>
                            <td><span class="px-2 inline-flex text-xs leading-5 font-semibold rounded-full ${isBlocked ? 'bg-red-100 text-red-800' : 'bg-green-100 text-green-800'}">${isBlocked ? 'BLOCKED' : 'ACTIVE'}</span></td>
                            <td>
                                <button class="btn btn-warning btn-sm" onclick="toggleBlockUser('${doc.id}', ${isBlocked})">${isBlocked ? 'Unblock' : 'Block'}</button>
                            </td>
                        </tr>
                    `;
                    usersTableBody.innerHTML += row;
                });
            });
        }

        function loadWithdrawals() {
            const withdrawalsTableBody = document.getElementById('withdrawals-table-body');
            onSnapshot(collection(db, "withdrawals"), async (snapshot) => {
                withdrawalsTableBody.innerHTML = '';
                for (const docSnapshot of snapshot.docs) {
                    const withdrawal = docSnapshot.data();
                    const userSnap = await getDoc(doc(db, "users", withdrawal.userId));
                    const user = userSnap.exists() ? userSnap.data() : { name: 'Deleted User' };
                    
                    let actions = '';
                    if (withdrawal.status === 'pending') {
                        actions = `
                            <button class="btn btn-success btn-sm mr-2" onclick="processWithdrawal('${docSnapshot.id}', 'paid', '${withdrawal.userId}', ${withdrawal.amount})">Paid</button>
                            <button class="btn btn-danger btn-sm" onclick="processWithdrawal('${docSnapshot.id}', 'rejected', '${withdrawal.userId}', ${withdrawal.amount})">Reject</button>
                        `;
                    } else if (withdrawal.status === 'paid') {
                        actions = `<span class="px-2 inline-flex text-xs leading-5 font-semibold rounded-full bg-green-100 text-green-800">Paid</span>`;
                    } else {
                        actions = `<span class="px-2 inline-flex text-xs leading-5 font-semibold rounded-full bg-red-100 text-red-800">Rejected</span>`;
                    }

                    const row = `
                        <tr>
                            <td>${user.name || 'N/A'}</td>
                            <td>${withdrawal.amount} Coins</td>
                            <td>${withdrawal.method}</td>
                            <td>${withdrawal.details}</td>
                            <td>${withdrawal.requestedAt.toDate().toLocaleString()}</td>
                            <td>${actions}</td>
                        </tr>
                    `;
                    withdrawalsTableBody.innerHTML += row;
                }
            });
        }

        window.toggleBlockUser = (userId, isBlocked) => {
            const action = isBlocked ? 'Unblock' : 'Block';
            showConfirm(`Are you sure you want to ${action} this user?`, async () => {
                await updateDoc(doc(db, "users", userId), { isBlocked: !isBlocked });
            });
        };

        window.processWithdrawal = (withdrawalId, status, userId, amount) => {
            const message = status === 'paid' ? 'Are you sure you want to mark this as Paid?' : 'Are you sure you want to Reject this request? The user will get the coins back.';
            showConfirm(message, async () => {
                await updateDoc(doc(db, "withdrawals", withdrawalId), { status: status });
                
                // Reject durumunda bakiyeyi iade et
                if (status === 'rejected') {
                    const userRef = doc(db, "users", userId);
                    const userSnap = await getDoc(userRef);
                    if (userSnap.exists()) {
                        await updateDoc(userRef, { balance: userSnap.data().balance + amount });
                    }
                }
            });
        };
        
        async function loadSettings() {
            const configRef = doc(db, "config", "main");
            const configSnap = await getDoc(configRef);
            if (configSnap.exists()) {
                const config = configSnap.data();
                document.getElementById('min-withdrawal').value = config.minWithdrawal || 0;
                document.getElementById('daily-ad-limit').value = config.dailyAdLimit || 0;
                document.getElementById('coin-value-coins').value = config.coinValueCoins || 0;
                document.getElementById('coin-value-inr').value = config.coinValueInr || 0;
                document.getElementById('payment-methods').value = (config.paymentMethods || []).join(',');
            }
        }

        async function saveSettings() {
            const minWithdrawal = parseInt(document.getElementById('min-withdrawal').value);
            const dailyAdLimit = parseInt(document.getElementById('daily-ad-limit').value);
            const coinValueCoins = parseInt(document.getElementById('coin-value-coins').value);
            const coinValueInr = parseInt(document.getElementById('coin-value-inr').value);
            const paymentMethods = document.getElementById('payment-methods').value.split(',').map(m => m.trim()).filter(m => m.length > 0);

            if (isNaN(minWithdrawal) || isNaN(dailyAdLimit) || isNaN(coinValueCoins) || isNaN(coinValueInr)) {
                return showAlert('Please enter valid numbers for all fields.');
            }

            const configData = {
                minWithdrawal,
                dailyAdLimit,
                coinValueCoins,
                coinValueInr,
                paymentMethods
            };
            
            try {
                await setDoc(doc(db, "config", "main"), configData, { merge: true });
                showAlert('Settings saved successfully!');
            } catch (error) {
                showAlert('Error saving settings: ' + error.message);
            }
        }

        async function sendNotification() {
            const title = document.getElementById('notification-title').value;
            const message = document.getElementById('notification-message').value;

            if (!title || !message) {
                return showAlert('Title and Message cannot be empty.');
            }

            showConfirm('Are you sure you want to send this notification to ALL users?', async () => {
                try {
                    await addDoc(collection(db, "notifications"), {
                        title,
                        message,
                        createdAt: serverTimestamp()
                    });
                    document.getElementById('notification-title').value = '';
                    document.getElementById('notification-message').value = '';
                    showAlert('Notification sent successfully!');
                } catch (error) {
                    showAlert('Error sending notification: ' + error.message);
                }
            });
        }

        function showAlert(message) {
            document.getElementById('alert-message').textContent = message;
            document.getElementById('custom-alert').classList.remove('hidden');
            document.getElementById('alert-ok-btn').onclick = () => { document.getElementById('custom-alert').classList.add('hidden'); };
        }

        function showConfirm(message, onConfirm) {
            const confirmModal = document.getElementById('custom-confirm');
            const confirmMessage = document.getElementById('confirm-message');
            const confirmOkBtn = document.getElementById('confirm-ok-btn');
            const confirmCancelBtn = document.getElementById('confirm-cancel-btn');

            confirmMessage.textContent = message;
            confirmModal.classList.remove('hidden');

            const okListener = () => {
                onConfirm();
                confirmModal.classList.add('hidden');
                confirmOkBtn.removeEventListener('click', okListener);
                confirmCancelBtn.removeEventListener('click', cancelListener);
            };

            const cancelListener = () => {
                confirmModal.classList.add('hidden');
                confirmOkBtn.removeEventListener('click', okListener);
                confirmCancelBtn.removeEventListener('click', cancelListener);
            };

            confirmOkBtn.addEventListener('click', okListener);
            confirmCancelBtn.addEventListener('click', cancelListener);
        }
    </script>
</body>
</html>

