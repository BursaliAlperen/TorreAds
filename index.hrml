<!DOCTYPE html>
<html lang="tr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=no">
    <title>TorreAds</title>
    
    <!-- GigaPub SDK -->
    <script src="https://ad.gigapub.tech/script?id=986"></script>
    <script src="https://telegram.org/js/telegram-web-app.js"></script>

    <style>
        :root {
            --tg-theme-bg-color: #f5f9ff; 
            --tg-theme-text-color: #1a365d; 
            --tg-theme-button-color: #2c7be5;
            --tg-theme-button-text-color: #ffffff; 
            --tg-theme-hint-color: #5a7ba7; 
            --success-color: #00d97e;
            --warning-color: #f6c343; 
            --danger-color: #e63757; 
            --secondary-bg-color: #ffffff; 
            --border-color: #d1e3ff;
            --ton-color: #0088cc;
        }
        
        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif; 
            margin: 0;
            padding: 20px 15px 90px 15px; 
            background-color: var(--tg-theme-bg-color); 
            color: var(--tg-theme-text-color);
            display: flex; 
            flex-direction: column; 
            align-items: center; 
            text-align: center; 
            min-height: 100vh; 
            box-sizing: border-box;
        }
        
        .container { 
            width: 100%; 
            max-width: 500px; 
        }
        
        .view { 
            display: none; 
            width: 100%; 
            animation: fadeIn 0.3s ease-in-out; 
        }
        
        #home-view { 
            display: block; 
        }
        
        @keyframes fadeIn { 
            from { 
                opacity: 0; 
                transform: translateY(10px); 
            } 
            to { 
                opacity: 1; 
                transform: translateY(0); 
            } 
        }
        
        .header { 
            margin-bottom: 25px; 
            position: relative; 
        }
        
        .header h1 { 
            font-size: 32px; 
            font-weight: 700; 
            margin-bottom: 5px; 
            color: #1a365d; 
        }
        
        .header p { 
            color: var(--tg-theme-hint-color); 
            font-size: 16px; 
        }
        
        .card {
            background-color: var(--secondary-bg-color); 
            padding: 25px; 
            border-radius: 16px; 
            margin-bottom: 25px;
            box-shadow: 0 8px 16px rgba(0, 123, 255, 0.1); 
            border: 1px solid var(--border-color);
        }
        
        .card h2 {
            margin: 0 0 12px 0; 
            font-size: 16px; 
            color: var(--tg-theme-hint-color); 
            font-weight: 500;
            text-transform: uppercase; 
            letter-spacing: 0.5px;
        }
        
        .balance-amount { 
            font-size: 42px; 
            font-weight: 700; 
            color: #1a365d; 
            margin-bottom: 10px; 
        }
        
        .ad-info-grid { 
            display: grid; 
            grid-template-columns: 1fr 1fr; 
            gap: 15px; 
            text-align: center; 
        }
        
        .ad-info-item h3 { 
            font-size: 20px; 
            font-weight: 600; 
            margin: 0 0 5px 0; 
            color: #1a365d; 
        }
        
        .ad-info-item p { 
            font-size: 14px; 
            color: var(--tg-theme-hint-color); 
            margin: 0; 
        }
        
        .ad-buttons { 
            display: flex; 
            flex-direction: column; 
            gap: 15px; 
            margin-bottom: 25px; 
        }
        
        .btn {
            width: 100%; 
            padding: 16px; 
            font-size: 18px; 
            font-weight: 600; 
            border: none; 
            border-radius: 12px; 
            cursor: pointer;
            transition: transform 0.2s ease, background-color 0.2s ease, box-shadow 0.2s ease;
            background: linear-gradient(145deg, var(--tg-theme-button-color), #1a6fd9); 
            color: var(--tg-theme-button-text-color);
            box-shadow: 0 4px 10px rgba(44, 123, 229, 0.2);
        }
        
        .btn:hover { 
            transform: translateY(-2px); 
            box-shadow: 0 6px 15px rgba(44, 123, 229, 0.3); 
        }
        
        .btn:active { 
            transform: scale(0.98); 
        }
        
        .btn:disabled { 
            background: #c5d9ff; 
            color: #8ba7d0; 
            cursor: not-allowed; 
            box-shadow: none; 
            transform: none; 
        }
        
        #mainWithdrawBtn { 
            background: linear-gradient(145deg, var(--success-color), #00b86c); 
            box-shadow: 0 4px 10px rgba(0, 217, 126, 0.2); 
        }
        
        #mainWithdrawBtn:disabled { 
            background: #c5d9ff; 
            box-shadow: none; 
        }
        
        .status-message {
            position: fixed; 
            bottom: 80px; 
            left: 50%; 
            transform: translateX(-50%); 
            width: 90%; 
            max-width: 480px;
            padding: 12px 15px; 
            border-radius: 10px; 
            font-weight: 500; 
            display: none; 
            animation: fadeIn 0.3s;
            z-index: 1000; 
            box-sizing: border-box;
        }
        
        .success { 
            display: block; 
            background-color: rgba(0, 217, 126, 0.15); 
            border-left: 5px solid var(--success-color); 
            color: #008a50; 
        }
        
        .error { 
            display: block; 
            background-color: rgba(230, 55, 87, 0.15); 
            border-left: 5px solid var(--danger-color); 
            color: #c41a3a; 
        }
        
        .info { 
            display: block; 
            background-color: rgba(44, 123, 229, 0.15); 
            border-left: 5px solid var(--tg-theme-button-color); 
            color: #1a6fd9; 
        }
        
        .footer-nav {
            position: fixed; 
            bottom: 0; 
            left: 0; 
            right: 0; 
            background-color: var(--secondary-bg-color); 
            display: flex;
            justify-content: space-around; 
            padding: 10px 0; 
            box-shadow: 0 -4px 12px rgba(0, 123, 255, 0.1);
            border-top: 1px solid var(--border-color); 
            z-index: 999;
        }
        
        .nav-btn {
            background: none; 
            border: none; 
            color: var(--tg-theme-hint-color); 
            display: flex; 
            flex-direction: column;
            align-items: center; 
            font-size: 12px; 
            font-weight: 500; 
            cursor: pointer; 
            padding: 5px 15px;
            border-radius: 12px; 
            transition: color 0.2s, background-color 0.2s;
        }
        
        .nav-btn.active { 
            color: var(--tg-theme-button-color); 
        }
        
        .nav-btn:hover:not(.active) { 
            color: #1a365d; 
        }
        
        .nav-btn .icon { 
            width: 28px; 
            height: 28px; 
            margin-bottom: 4px; 
        }
        
        .admin-header-btn {
            position: absolute;
            top: 0;
            right: 0;
            background: linear-gradient(145deg, var(--warning-color), #e6b400);
            color: white;
            border: none;
            border-radius: 8px;
            padding: 8px 12px;
            font-size: 12px;
            font-weight: 600;
            cursor: pointer;
            display: flex;
            align-items: center;
            gap: 5px;
            box-shadow: 0 2px 5px rgba(0,0,0,0.1);
        }

        .input-group { 
            margin-bottom: 20px; 
            text-align: left; 
        }
        
        .input-group label { 
            display: block; 
            margin-bottom: 8px; 
            color: var(--tg-theme-hint-color); 
            font-size: 14px; 
            font-weight: 500; 
        }
        
        .input-group input, .input-group textarea {
            width: 100%; 
            padding: 14px; 
            border-radius: 10px; 
            border: 1px solid var(--border-color);
            background-color: #f5f9ff; 
            color: var(--tg-theme-text-color); 
            font-size: 16px; 
            box-sizing: border-box;
        }
        
        .input-group input:focus, .input-group textarea:focus { 
            outline: none; 
            border-color: var(--tg-theme-button-color); 
            box-shadow: 0 0 0 3px rgba(44, 123, 229, 0.2); 
        }
        
        .referral-input-container {
            margin-top: 20px;
            padding: 15px;
            background-color: var(--secondary-bg-color);
            border-radius: 10px;
            border: 1px solid var(--border-color);
        }
        
        .referral-input-group {
            display: flex;
            gap: 10px;
            margin-top: 10px;
        }
        
        .referral-input-group input {
            flex: 1;
            padding: 12px;
            border-radius: 8px;
            border: 1px solid var(--border-color);
            background-color: #f5f9ff;
            color: var(--tg-theme-text-color);
        }
        
        .referral-input-group button {
            padding: 12px 20px;
            background: linear-gradient(145deg, var(--tg-theme-button-color), #1a6fd9);
            color: white;
            border: none;
            border-radius: 8px;
            cursor: pointer;
            font-weight: 600;
        }
        
        .referral-code-box {
            background-color: #f0f7ff;
            padding: 15px;
            border-radius: 10px;
            border: 1px dashed var(--tg-theme-hint-color);
            margin-top: 15px;
            cursor: pointer;
            color: #1a365d;
            transition: background-color 0.2s;
            text-align: center;
            font-weight: bold;
            font-size: 18px;
            letter-spacing: 2px;
        }
        
        .referral-code-box:hover {
            background-color: #e1efff;
        }
        
        #admin-view { 
            display: none; 
        }
        
        .admin-stats-grid {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 15px;
            margin-bottom: 20px;
        }
        
        .admin-stat-card {
            background-color: var(--secondary-bg-color);
            padding: 15px;
            border-radius: 12px;
            border: 1px solid var(--border-color);
            text-align: center;
        }
        
        .admin-stat-value {
            font-size: 24px;
            font-weight: bold;
            color: #1a365d;
            margin-bottom: 5px;
        }
        
        .admin-stat-label {
            font-size: 12px;
            color: var(--tg-theme-hint-color);
            text-transform: uppercase;
        }
        
        .admin-controls {
            display: flex;
            flex-direction: column;
            gap: 10px;
            margin-top: 20px;
        }
        
        .admin-control-btn {
            padding: 12px;
            background: linear-gradient(145deg, var(--warning-color), #e6b400);
            color: white;
            border: none;
            border-radius: 8px;
            cursor: pointer;
            font-weight: 600;
        }
        
        .admin-control-btn.danger {
            background: linear-gradient(145deg, var(--danger-color), #c41a3a);
        }
        
        .admin-user-list {
            max-height: 300px;
            overflow-y: auto;
            margin-top: 15px;
            text-align: left;
        }
        
        .admin-user-item {
            padding: 10px;
            border-bottom: 1px solid var(--border-color);
            display: flex;
            justify-content: space-between;
            align-items: center;
        }
        
        .admin-user-info {
            flex: 1;
        }
        
        .admin-user-id {
            font-weight: bold;
            color: #1a365d;
        }
        
        .admin-user-balance {
            font-size: 12px;
            color: var(--tg-theme-hint-color);
        }
        
        .admin-user-actions {
            display: flex;
            gap: 5px;
        }
        
        .admin-action-btn {
            padding: 5px 10px;
            background-color: var(--tg-theme-button-color);
            color: white;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            font-size: 12px;
        }
        
        #tasks-view { 
            display: none; 
        }
        
        .task-list {
            display: flex;
            flex-direction: column;
            gap: 15px;
        }
        
        .task-item {
            background-color: var(--secondary-bg-color);
            padding: 15px;
            border-radius: 12px;
            border: 1px solid var(--border-color);
            display: flex;
            justify-content: space-between;
            align-items: center;
        }
        
        .task-info {
            flex: 1;
            text-align: left;
        }
        
        .task-title {
            font-weight: bold;
            color: #1a365d;
            margin-bottom: 5px;
        }
        
        .task-description {
            font-size: 14px;
            color: var(--tg-theme-hint-color);
        }
        
        .task-reward {
            font-weight: bold;
            color: var(--success-color);
        }
        
        .task-btn {
            padding: 8px 15px;
            background: linear-gradient(145deg, var(--tg-theme-button-color), #1a6fd9);
            color: white;
            border: none;
            border-radius: 8px;
            cursor: pointer;
            font-weight: 600;
        }
        
        #about-view { 
            display: none; 
        }
        
        .about-content {
            text-align: left;
            line-height: 1.6;
        }
        
        .about-section {
            margin-bottom: 20px;
        }
        
        .about-section h3 {
            color: #1a365d;
            margin-bottom: 10px;
        }
        
        .about-section p {
            color: var(--tg-theme-hint-color);
            margin-bottom: 10px;
        }
        
        .withdraw-requests-list {
            max-height: 300px;
            overflow-y: auto;
            margin-top: 15px;
            text-align: left;
        }
        
        .withdraw-request-item {
            padding: 10px;
            border-bottom: 1px solid var(--border-color);
            display: flex;
            justify-content: space-between;
            align-items: center;
        }
        
        .withdraw-request-info {
            flex: 1;
        }
        
        .withdraw-request-user {
            font-weight: bold;
            color: #1a365d;
        }
        
        .withdraw-request-details {
            font-size: 12px;
            color: var(--tg-theme-hint-color);
        }
        
        .withdraw-request-actions {
            display: flex;
            gap: 5px;
        }
        
        .withdraw-action-btn {
            padding: 5px 10px;
            background-color: var(--tg-theme-button-color);
            color: white;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            font-size: 12px;
        }
        
        .withdraw-action-btn.approve {
            background-color: var(--success-color);
        }
        
        .withdraw-action-btn.reject {
            background-color: var(--danger-color);
        }
        
        .task-creation-form {
            margin-top: 20px;
            padding: 15px;
            background-color: var(--secondary-bg-color);
            border-radius: 10px;
            border: 1px solid var(--border-color);
        }
        
        .form-row {
            display: flex;
            gap: 10px;
            margin-bottom: 15px;
        }
        
        .form-row .input-group {
            flex: 1;
            margin-bottom: 0;
        }

        .btn-loading {
            position: relative;
            pointer-events: none;
        }
        
        .btn-loading::after {
            content: '';
            position: absolute;
            width: 20px;
            height: 20px;
            top: 50%;
            left: 50%;
            margin-left: -10px;
            margin-top: -10px;
            border: 2px solid transparent;
            border-top: 2px solid #ffffff;
            border-radius: 50%;
            animation: spin 1s linear infinite;
        }
        
        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
        
        /* TON Grafik Stilleri */
        .chart-container {
            margin-top: 20px;
            padding: 15px;
            background-color: var(--secondary-bg-color);
            border-radius: 10px;
            border: 1px solid var(--border-color);
        }
        
        .chart-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 15px;
        }
        
        .chart-title {
            font-size: 16px;
            font-weight: 600;
            color: #1a365d;
        }
        
        .chart-price {
            font-size: 18px;
            font-weight: 700;
            color: var(--ton-color);
        }
        
        .chart-change {
            font-size: 14px;
            font-weight: 500;
            padding: 2px 8px;
            border-radius: 4px;
        }
        
        .chart-change.positive {
            background-color: rgba(0, 217, 126, 0.15);
            color: #008a50;
        }
        
        .chart-change.negative {
            background-color: rgba(230, 55, 87, 0.15);
            color: #c41a3a;
        }
        
        .chart-placeholder {
            height: 200px;
            display: flex;
            align-items: center;
            justify-content: center;
            background-color: #f8fbff;
            border-radius: 8px;
            color: var(--tg-theme-hint-color);
            font-size: 14px;
        }
        
        /* TON Ödeme Bilgisi */
        .ton-payment-info {
            background-color: #f0f9ff;
            border-left: 4px solid var(--ton-color);
            padding: 15px;
            border-radius: 8px;
            margin: 15px 0;
            text-align: left;
        }
        
        .ton-payment-info h3 {
            color: var(--ton-color);
            margin-top: 0;
            margin-bottom: 10px;
            font-size: 16px;
        }
        
        .ton-payment-info p {
            margin: 5px 0;
            font-size: 14px;
            color: var(--tg-theme-hint-color);
        }
        
        .conversion-rate {
            font-weight: bold;
            color: #1a365d;
        }
        
        .payment-options {
            display: flex;
            flex-direction: column;
            gap: 10px;
            margin: 15px 0;
        }
        
        .payment-option {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 12px;
            background-color: #f8fbff;
            border-radius: 8px;
            border: 1px solid var(--border-color);
        }
        
        .payment-option.active {
            border-color: var(--ton-color);
            background-color: #f0f9ff;
        }
        
        .payment-option-info {
            text-align: left;
        }
        
        .payment-option-name {
            font-weight: bold;
            color: #1a365d;
        }
        
        .payment-option-desc {
            font-size: 12px;
            color: var(--tg-theme-hint-color);
        }
        
        .payment-option-amount {
            font-weight: bold;
            color: var(--ton-color);
        }
    </style>
</head>
<body>
    <div class="container">
        <div id="home-view" class="view">
            <div class="header">
                <h1>TorreAds</h1>
                <p>Reklam İzle ve TON Kazan</p>
                <button class="admin-header-btn" id="adminHeaderBtn" style="display: none;">
                    <svg width="16" height="16" viewBox="0 0 24 24" fill="currentColor">
                        <path d="M12 1L3 5v6c0 5.55 3.84 10.74 9 12 5.16-1.26 9-6.45 9-12V5l-9-4zm0 10.99h7c-.53 4.12-3.28 7.79-7 8.94V12H5V6.3l7-3.11v8.8z"/>
                    </svg>
                    Admin
                </button>
            </div>
            
            <!-- TON Grafik Bölümü -->
            <div class="card">
                <h2>TON Fiyatı</h2>
                <div class="chart-container">
                    <div class="chart-header">
                        <div class="chart-title">Toncoin (TON)</div>
                        <div class="chart-price" id="tonPrice">$0.00</div>
                    </div>
                    <div class="chart-change-container">
                        <span class="chart-change" id="tonChange">24s: 0.00%</span>
                    </div>
                    <div class="chart-placeholder" id="tonChart">
                        TON fiyat grafiği yükleniyor...
                    </div>
                </div>
            </div>
            
            <div class="card">
                <h2>Mevcut Bakiye</h2>
                <div class="balance-amount" id="balanceDisplay">USDT 0.00</div>
                <div class="ad-info-grid">
                    <div class="ad-info-item"><h3 id="adCountDisplay">0</h3><p>Toplam İzlenen Reklam</p></div>
                    <div class="ad-info-item"><h3 id="dailyAdCountDisplay">0 / 100</h3><p>Bugünkü Reklamlar</p></div>
                </div>
            </div>
            <div class="ad-buttons">
                <button class="btn" id="rewardedBtn">Reklam İzle (+0.001 USDT)</button>
            </div>
            <button class="btn" id="mainWithdrawBtn" disabled>Çekim Yapmak İçin 0.50 USDT'ye Ulaş</button>
        </div>

        <!-- Para Çekme View'ı Güncellendi -->
        <div id="withdraw-view" class="view">
            <div class="header"><h1>Para Çekme</h1><p>Kazancınızı TON olarak talep edin</p></div>
            <div class="card">
                <h2>Bakiyeniz</h2>
                <div class="balance-amount" id="withdrawBalanceDisplay">USDT 0.00</div>
                <p style="color: var(--tg-theme-hint-color); margin-top: 15px;">Minimum çekim miktarı 0.50 USDT'dir.</p>
                
                <div class="ton-payment-info">
                    <h3>TON Ödeme Bilgileri</h3>
                    <p>Mevcut bakiyeniz: <span class="conversion-rate" id="usdtBalance">0.00</span> USDT</p>
                    <p>TON karşılığı: <span class="conversion-rate" id="tonEquivalent">0.000</span> TON</p>
                    <p>Güncel kur: <span class="conversion-rate" id="currentRate">1 USDT = 0.000 TON</span></p>
                    <p style="font-size: 12px; margin-top: 10px;">* 0.01$ = yaklaşık 0.003 TON</p>
                </div>
            </div>
            <div class="card">
                <h2>Ödeme Detayları</h2>
                
                <div class="payment-options">
                    <div class="payment-option active">
                        <div class="payment-option-info">
                            <div class="payment-option-name">TON (Toncoin)</div>
                            <div class="payment-option-desc">Önerilen - Hızlı ve düşük ücretli</div>
                        </div>
                        <div class="payment-option-amount" id="tonAmount">0.000 TON</div>
                    </div>
                </div>
                
                <div class="input-group">
                    <label for="paymentAddress">TON Cüzdan Adresiniz</label>
                    <input type="text" id="paymentAddress" placeholder="örn: EQ... (TON Adresi)">
                    <p style="font-size: 12px; color: var(--tg-theme-hint-color); margin-top: 5px;">Geçerli bir TON cüzdan adresi giriniz.</p>
                </div>
                <button class="btn" id="finalWithdrawBtn" disabled>TON ile Para Çek</button>
            </div>
        </div>
        
        <!-- Diğer view'lar aynı kalacak -->
        <div id="referral-view" class="view">
            <div class="header"><h1>Referanslar</h1><p>Arkadaşlarını davet et ve daha fazla kazan!</p></div>
            
            <div class="card">
                <h2>Referans İstatistikleriniz</h2>
                <div class="ad-info-grid">
                    <div class="ad-info-item">
                        <h3 id="referralCountDisplay">0</h3>
                        <p>Toplam Referans</p>
                    </div>
                    <div class="ad-info-item">
                        <h3 id="referralBonusDisplay">USDT 0.00</h3>
                        <p>Referans Kazancı</p>
                    </div>
                </div>
            </div>
            
            <div class="card">
                <h2>Referans Kodunu Girin</h2>
                <p>Eğer birisi sizi referans ettiyse, bonus almak için kodunu buraya girin!</p>
                <div class="referral-input-container">
                    <div class="referral-input-group">
                        <input type="text" id="referralCodeInput" placeholder="Referans kodunu girin">
                        <button id="submitReferralBtn">Gönder</button>
                    </div>
                </div>
            </div>
            
            <div class="card">
                <h2>Referans Kodunuz</h2>
                <p>Bu kodu arkadaşlarınızla paylaşın. Katılan her onaylanmış arkadaş için 0.02 USDT kazanırsınız!</p>
                <div class="referral-code-box" id="referralCodeBox" title="Kopyalamak için tıklayın">
                    <span id="userReferralCode">Yükleniyor...</span>
                </div>
                <p style="font-size:12px; color:var(--tg-theme-hint-color); margin-top:15px;">Kodu kopyalamak için üzerine tıklayın</p>
            </div>
            
            <div class="card">
                <h2>Referans Linkiniz</h2>
                <p>Aşağıdaki linki arkadaşlarınızla paylaşarak daha hızlı kazanın!</p>
                <div class="referral-code-box" id="referralLinkBox" title="Kopyalamak için tıklayın">
                    <span id="userReferralLink">Yükleniyor...</span>
                </div>
                <p style="font-size:12px; color:var(--tg-theme-hint-color); margin-top:15px;">Linki kopyalamak için üzerine tıklayın</p>
            </div>
        </div>
        
        <div id="tasks-view" class="view">
            <div class="header"><h1>Görevler</h1><p>Ek görevlerle daha fazla kazanın</p></div>
            
            <div class="card">
                <h2>Mevcut Görevler</h2>
                <div class="task-list" id="manualTasksList">
                </div>
            </div>
            
            <div class="card">
                <h2>Görev İlerlemeniz</h2>
                <div class="ad-info-grid">
                    <div class="ad-info-item"><h3 id="completedTasks">0</h3><p>Tamamlanan Görevler</p></div>
                    <div class="ad-info-item"><h3 id="taskEarnings">USDT 0.00</h3><p>Görev Kazancı</p></div>
                </div>
            </div>
        </div>
        
        <div id="admin-view" class="view">
            <div class="header"><h1>Admin Paneli</h1><p>Uygulama yönetimi ve kullanıcı kontrolü</p></div>
            
            <div class="card">
                <h2>Genel İstatistikler</h2>
                <div class="admin-stats-grid">
                    <div class="admin-stat-card">
                        <div class="admin-stat-value" id="totalUsers">0</div>
                        <div class="admin-stat-label">Toplam Kullanıcı</div>
                    </div>
                    <div class="admin-stat-card">
                        <div class="admin-stat-value" id="totalAds">0</div>
                        <div class="admin-stat-label">Toplam Reklam</div>
                    </div>
                    <div class="admin-stat-card">
                        <div class="admin-stat-value" id="totalWithdrawals">0</div>
                        <div class="admin-stat-label">Toplam Çekim</div>
                    </div>
                    <div class="admin-stat-card">
                        <div class="admin-stat-value" id="totalBalance">USDT 0.00</div>
                        <div class="admin-stat-label">Toplam Bakiye</div>
                    </div>
                </div>
            </div>
            
            <div class="card">
                <h2>Kullanıcı Yönetimi</h2>
                <div class="input-group">
                    <label for="userSearch">Kullanıcı Ara (ID veya İsim)</label>
                    <input type="text" id="userSearch" placeholder="Kullanıcı ID veya isim girin">
                </div>
                <button class="btn" id="searchUserBtn">Ara</button>
                
                <div class="admin-user-list" id="adminUserList">
                </div>
            </div>
            
            <div class="card">
                <h2>Görev Yönetimi</h2>
                <div class="task-creation-form">
                    <div class="input-group">
                        <label for="adminTaskTitle">Görev Başlığı</label>
                        <input type="text" id="adminTaskTitle" placeholder="Görev başlığını girin">
                    </div>
                    <div class="input-group">
                        <label for="adminTaskDescription">Görev Açıklaması</label>
                        <textarea id="adminTaskDescription" placeholder="Görev açıklamasını girin" rows="3"></textarea>
                    </div>
                    <div class="input-group">
                        <label for="adminTaskLink">Kanal/Bot Linki</label>
                        <input type="text" id="adminTaskLink" placeholder="https://t.me/kanal_adi">
                    </div>
                    <div class="input-group">
                        <label for="adminTaskReward">Ödül (USDT)</label>
                        <input type="number" id="adminTaskReward" step="0.001" min="0.001" value="0.005">
                    </div>
                    <button class="btn" id="adminAddTaskBtn">Görev Ekle</button>
                </div>
                
                <h3 style="margin-top: 20px;">Mevcut Görevler</h3>
                <div class="task-list" id="adminTasksList">
                </div>
            </div>
            
            <div class="card">
                <h2>Çekim Talepleri</h2>
                <div class="withdraw-requests-list" id="withdrawRequestsList">
                </div>
            </div>
            
            <div class="card">
                <h2>Sistem Ayarları</h2>
                <div class="admin-controls">
                    <button class="admin-control-btn" id="resetAdsBtn">Günlük Reklamları Sıfırla</button>
                    <button class="admin-control-btn" id="updateRewardsBtn">Ödülleri Güncelle</button>
                    <button class="admin-control-btn danger" id="clearDataBtn">Tüm Verileri Temizle</button>
                </div>
            </div>
        </div>
        
        <div id="about-view" class="view">
            <div class="header"><h1>Hakkında</h1><p>TorreAds hakkında bilgiler</p></div>
            
            <div class="card">
                <h2>Uygulama Bilgileri</h2>
                <div class="about-content">
                    <div class="about-section">
                        <h3>TorreAds Nedir?</h3>
                        <p>TorreAds, Telegram kullanıcılarının reklam izleyerek ve görevleri tamamlayarak TONCoin kazanabileceği bir platformdur.</p>
                    </div>
                    
                    <div class="about-section">
                        <h3>Nasıl Çalışır?</h3>
                        <p>Reklam izleyerek, görevleri tamamlayarak ve arkadaşlarınızı davet ederek USDT kazanırsınız. Kazancınızı TONCoin olarak çekebilirsiniz.</p>
                    </div>
                    
                    <div class="about-section">
                        <h3>Ödeme Yöntemi</h3>
                        <p>Ödemeler TONCoin (Toncoin) ile yapılmaktadır. Hızlı işlemler ve düşük ücretler için TONCoin kullanıyoruz.</p>
                    </div>
                    
                    <div class="about-section">
                        <h3>Minimum Çekim</h3>
                        <p>Minimum çekim miktarı 0.50 USDT'dir. Bu miktara ulaştığınızda TONCoin cüzdanınıza ödeme alabilirsiniz.</p>
                    </div>
                    
                    <div class="about-section">
                        <h3>İletişim</h3>
                        <p>Herhangi bir sorunuz veya sorununuz varsa, lütfen destek ekibimizle iletişime geçin.</p>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="status-message" id="statusMessage"></div>

    <div class="footer-nav">
        <button class="nav-btn active" data-view="home-view">
            <svg class="icon" viewBox="0 0 24 24" fill="currentColor"><path d="M10 20v-6h4v6h5v-8h3L12 3 2 12h3v8z"/></svg>
            Ana Sayfa
        </button>
        <button class="nav-btn" data-view="withdraw-view">
            <svg class="icon" viewBox="0 0 24 24" fill="currentColor"><path d="M20 8h-3V4H3c-1.1 0-2 .9-2 2v11h2c0 1.66 1.34 3 3 3s3-1.34 3-3h6c0 1.66 1.34 3 3 3s3-1.34 3-3h2v-5l-3-4zM6 18.5c-.83 0-1.5-.67-1.5-1.5s.67-1.5 1.5-1.5 1.5.67 1.5 1.5-.67 1.5-1.5 1.5zm13.5-9l1.96 2.5H17V9.5h2.5zm-1.5 9c-.83 0-1.5-.67-1.5-1.5s.67-1.5 1.5-1.5 1.5.67 1.5 1.5-.67 1.5-1.5 1.5z"/></svg>
            Para Çekme
        </button>
        <button class="nav-btn" data-view="referral-view">
            <svg class="icon" viewBox="0 0 24 24" fill="currentColor"><path d="M16 11c1.66 0 2.99-1.34 2.99-3S17.66 5 16 5c-1.66 0-3 1.34-3 3s1.34 3 3 3zm-8 0c1.66 0 2.99-1.34 2.99-3S9.66 5 8 5C6.34 5 5 6.34 5 8s1.34 3 3 3zm0 2c-2.33 0-7 1.17-7 3.5V19h14v-2.5c0-2.33-4.67-3.5-7-3.5zm8 0c-.29 0-.62.02-.97.05 1.16.84 1.97 1.97 1.97 3.45V19h6v-2.5c0-2.33-4.67-3.5-7-3.5z"/></svg>
            Referanslar
        </button>
        <button class="nav-btn" data-view="tasks-view">
            <svg class="icon" viewBox="0 0 24 24" fill="currentColor"><path d="M19 3h-4.18C14.4 1.84 13.3 1 12 1c-1.3 0-2.4.84-2.82 2H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm-7 0c.55 0 1 .45 1 1s-.45 1-1 1-1-.45-1-1 .45-1 1-1zm2 14H7v-2h7v2zm3-4H7v-2h10v2zm0-4H7V7h10v2z"/></svg>
            Görevler
        </button>
        <button class="nav-btn" data-view="about-view">
            <svg class="icon" viewBox="0 0 24 24" fill="currentColor"><path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm1 15h-2v-6h2v6zm0-8h-2V7h2v2z"/></svg>
            Hakkında
        </button>
    </div>

    <script>
        // JSONBin.io API yapılandırması
        const JSONBIN_API_KEY = '$2a$10$Fv9Ec7a8u59so/FlxU1buOBqSrJZbj7FD8hxVsGCtRPqxQ6cpXBY.';
        const JSONBIN_BIN_ID = '68de237cae596e708f0333b0';
        const JSONBIN_URL = `https://api.jsonbin.io/v3/b/${JSONBIN_BIN_ID}/latest`;
        const JSONBIN_UPDATE_URL = `https://api.jsonbin.io/v3/b/${JSONBIN_BIN_ID}`;

        // TON fiyatı için CoinGecko API
        const COINGECKO_API_URL = "https://api.coingecko.com/api/v3/simple/price?ids=the-open-network&vs_currencies=usd&include_24hr_change=true";
        
        // Uygulama durumu
        let appState = {
            balance: 0,
            adCount: 0,
            dailyAdCount: 0,
            referralCount: 0,
            referralBonus: 0,
            completedTasks: 0,
            taskEarnings: 0,
            userId: null,
            userReferralCode: null,
            hasUsedReferral: false,
            lastAdTime: 0,
            tonPrice: 0,
            ton24hChange: 0,
            paymentAddress: ""
        };
        
        // Uygulama verileri
        let appData = {
            users: {},
            tasks: [],
            withdrawals: [],
            settings: {
                adReward: 0.001,
                minWithdraw: 0.50,
                referralReward: 0.02
            }
        };
        
        // TON fiyatını al
        async function fetchTonPrice() {
            try {
                const response = await fetch(COINGECKO_API_URL);
                const data = await response.json();
                
                if (data && data['the-open-network']) {
                    appState.tonPrice = data['the-open-network'].usd;
                    appState.ton24hChange = data['the-open-network'].usd_24h_change || 0;
                    
                    // UI'ı güncelle
                    document.getElementById('tonPrice').textContent = `$${appState.tonPrice.toFixed(2)}`;
                    
                    const changeElement = document.getElementById('tonChange');
                    changeElement.textContent = `24s: ${appState.ton24hChange.toFixed(2)}%`;
                    
                    if (appState.ton24hChange >= 0) {
                        changeElement.className = 'chart-change positive';
                    } else {
                        changeElement.className = 'chart-change negative';
                    }
                    
                    // TON dönüşümlerini güncelle
                    updateTonConversions();
                }
            } catch (error) {
                console.error('TON fiyatı alınırken hata:', error);
            }
        }
        
        // TON dönüşümlerini güncelle
        function updateTonConversions() {
            const usdtBalance = appState.balance;
            const tonEquivalent = usdtBalance / appState.tonPrice;
            const currentRate = 1 / appState.tonPrice;
            
            document.getElementById('usdtBalance').textContent = usdtBalance.toFixed(2);
            document.getElementById('tonEquivalent').textContent = tonEquivalent.toFixed(6);
            document.getElementById('currentRate').textContent = `1 USDT = ${currentRate.toFixed(6)} TON`;
            document.getElementById('tonAmount').textContent = `${tonEquivalent.toFixed(6)} TON`;
            
            // Örnek dönüşüm gösterimi
            const exampleUsdt = 0.01;
            const exampleTon = exampleUsdt / appState.tonPrice;
            document.querySelector('.ton-payment-info p:last-child').textContent = 
                `* 0.01$ = yaklaşık ${exampleTon.toFixed(3)} TON`;
        }
        
        // JSONBin'den veri çek
        async function fetchData() {
            try {
                const response = await fetch(JSONBIN_URL, {
                    headers: {
                        'X-Master-Key': JSONBIN_API_KEY
                    }
                });
                
                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }
                
                const data = await response.json();
                return data.record || {};
            } catch (error) {
                console.error('Veri çekme hatası:', error);
                return {};
            }
        }
        
        // JSONBin'e veri kaydet
        async function saveData() {
            try {
                const response = await fetch(JSONBIN_UPDATE_URL, {
                    method: 'PUT',
                    headers: {
                        'Content-Type': 'application/json',
                        'X-Master-Key': JSONBIN_API_KEY
                    },
                    body: JSON.stringify(appData)
                });
                
                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }
                
                const result = await response.json();
                console.log('Veri başarıyla kaydedildi:', result);
                return result;
            } catch (error) {
                console.error('Veri kaydetme hatası:', error);
                showStatus('Veri kaydedilemedi. Lütfen tekrar deneyin.', 'error');
                throw error;
            }
        }
        
        // Kullanıcı ID'sini oluştur
        function generateUserId() {
            return 'user_' + Math.random().toString(36).substr(2, 9);
        }
        
        // Referans kodunu oluştur
        function generateReferralCode() {
            return 'REF' + Math.random().toString(36).substr(2, 6).toUpperCase();
        }
        
        // Kullanıcıyı başlat
        async function initializeUser() {
            // Telegram WebApp'ten kullanıcı bilgilerini al
            let tgUser = null;
            let tg = null;
            
            try {
                tg = window.Telegram.WebApp;
                tg.expand();
                tg.enableClosingConfirmation();
                tg.MainButton.hide();
                tgUser = tg.initDataUnsafe.user;
            } catch (error) {
                console.log('Telegram WebApp bulunamadı, test modu aktif');
                tgUser = {
                    id: Math.floor(Math.random() * 1000000000),
                    first_name: 'Test Kullanıcı'
                };
            }
            
            // Kullanıcı ID'sini belirle
            let userId;
            if (tgUser && tgUser.id) {
                userId = tgUser.id.toString();
            } else {
                // LocalStorage'dan kullanıcı ID'sini al veya oluştur
                userId = localStorage.getItem('torreadds_user_id');
                if (!userId) {
                    userId = generateUserId();
                    localStorage.setItem('torreadds_user_id', userId);
                }
            }
            
            appState.userId = userId;
            
            // Referans kodunu oluştur veya al
            let userReferralCode = localStorage.getItem('torreadds_referral_code');
            if (!userReferralCode) {
                userReferralCode = generateReferralCode();
                localStorage.setItem('torreadds_referral_code', userReferralCode);
            }
            appState.userReferralCode = userReferralCode;
            
            // Referans kullanılıp kullanılmadığını kontrol et
            const hasUsedReferral = localStorage.getItem('torreadds_used_referral') === 'true';
            appState.hasUsedReferral = hasUsedReferral;
            
            // Ödeme adresini yükle
            const savedAddress = localStorage.getItem('torreadds_payment_address');
            if (savedAddress) {
                appState.paymentAddress = savedAddress;
                document.getElementById('paymentAddress').value = savedAddress;
            }
            
            // URL'den referans kodunu kontrol et
            const urlParams = new URLSearchParams(window.location.search);
            const refCode = urlParams.get('ref');
            
            if (refCode && !appState.hasUsedReferral) {
                // Referans kodunu kaydet
                await applyReferralCode(refCode);
            }
            
            // Verileri yükle
            await loadAppData();
            
            // TON fiyatını al
            await fetchTonPrice();
            
            // UI'ı güncelle
            updateUI();
            
            // Admin kontrolü
            const ADMIN_USER_IDS = ['8401848644', '7904032877'];
            if (ADMIN_USER_IDS.includes(appState.userId)) {
                document.getElementById('adminHeaderBtn').style.display = 'flex';
            }
        }
        
        // Uygulama verilerini yükle
        async function loadAppData() {
            try {
                const data = await fetchData();
                
                if (data && Object.keys(data).length > 0) {
                    appData = { ...appData, ...data };
                }
                
                // Kullanıcı verilerini yükle
                if (appData.users && appData.users[appState.userId]) {
                    const userData = appData.users[appState.userId];
                    appState.balance = userData.balance || 0;
                    appState.adCount = userData.adCount || 0;
                    appState.dailyAdCount = userData.dailyAdCount || 0;
                    appState.referralCount = userData.referralCount || 0;
                    appState.referralBonus = userData.referralBonus || 0;
                    appState.completedTasks = userData.completedTasks || 0;
                    appState.taskEarnings = userData.taskEarnings || 0;
                    
                    if (userData.paymentAddress) {
                        appState.paymentAddress = userData.paymentAddress;
                        document.getElementById('paymentAddress').value = userData.paymentAddress;
                    }
                } else {
                    // Yeni kullanıcı oluştur
                    appData.users[appState.userId] = {
                        balance: 0,
                        adCount: 0,
                        dailyAdCount: 0,
                        referralCount: 0,
                        referralBonus: 0,
                        completedTasks: 0,
                        taskEarnings: 0,
                        referralCode: appState.userReferralCode,
                        joinDate: new Date().toISOString(),
                        paymentAddress: appState.paymentAddress
                    };
                    
                    await saveData();
                }
                
                // Günlük reklam sayısını sıfırla (gerekirse)
                const lastReset = localStorage.getItem('torreadds_last_reset');
                const today = new Date().toDateString();
                
                if (lastReset !== today) {
                    appState.dailyAdCount = 0;
                    appData.users[appState.userId].dailyAdCount = 0;
                    localStorage.setItem('torreadds_last_reset', today);
                    await saveData();
                }
                
            } catch (error) {
                console.error('Uygulama verileri yüklenirken hata:', error);
            }
        }
        
        // Kullanıcı verilerini kaydet
        async function saveUserData() {
            try {
                if (appData.users[appState.userId]) {
                    appData.users[appState.userId] = {
                        ...appData.users[appState.userId],
                        balance: appState.balance,
                        adCount: appState.adCount,
                        dailyAdCount: appState.dailyAdCount,
                        referralCount: appState.referralCount,
                        referralBonus: appState.referralBonus,
                        completedTasks: appState.completedTasks,
                        taskEarnings: appState.taskEarnings,
                        paymentAddress: appState.paymentAddress,
                        lastUpdated: new Date().toISOString()
                    };
                }
                
                await saveData();
            } catch (error) {
                console.error('Kullanıcı verileri kaydedilirken hata:', error);
            }
        }
        
        // Referans kodunu uygula
        async function applyReferralCode(referralCode) {
            if (appState.hasUsedReferral) return;
            
            // Referans kodunun geçerli olup olmadığını kontrol et
            let referrerId = null;
            for (const [userId, user] of Object.entries(appData.users)) {
                if (user.referralCode === referralCode && userId !== appState.userId) {
                    referrerId = userId;
                    break;
                }
            }
            
            if (referrerId) {
                // Referansı kaydet
                appState.referredBy = referrerId;
                appState.balance += appData.settings.referralReward;
                appState.referralBonus += appData.settings.referralReward;
                
                // Referans veren kullanıcının referans sayısını artır
                if (appData.users[referrerId]) {
                    appData.users[referrerId].referralCount = (appData.users[referrerId].referralCount || 0) + 1;
                    appData.users[referrerId].referralBonus = (appData.users[referrerId].referralBonus || 0) + appData.settings.referralReward;
                    appData.users[referrerId].balance = (appData.users[referrerId].balance || 0) + appData.settings.referralReward;
                }
                
                // Veriyi kaydet
                await saveUserData();
                
                // LocalStorage'ı güncelle
                localStorage.setItem('torreadds_used_referral', 'true');
                appState.hasUsedReferral = true;
                
                showStatus(`Referans kodu başarıyla uygulandı! +${appData.settings.referralReward} USDT bonus kazandınız.`, 'success');
                
                // UI'ı güncelle
                updateUI();
            } else {
                showStatus('Geçersiz referans kodu.', 'error');
            }
        }
        
        // UI'ı güncelle
        function updateUI() {
            // Bakiye ve reklam sayılarını güncelle
            document.getElementById('balanceDisplay').textContent = `USDT ${appState.balance.toFixed(3)}`;
            document.getElementById('adCountDisplay').textContent = appState.adCount;
            document.getElementById('dailyAdCountDisplay').textContent = `${appState.dailyAdCount} / 100`;
            
            // Para çekme view'ını güncelle
            document.getElementById('withdrawBalanceDisplay').textContent = `USDT ${appState.balance.toFixed(3)}`;
            
            // Para çekme butonunu güncelle
            const withdrawBtn = document.getElementById('mainWithdrawBtn');
            if (appState.balance >= appData.settings.minWithdraw) {
                withdrawBtn.disabled = false;
                withdrawBtn.textContent = `USDT ${appState.balance.toFixed(3)} Çek`;
            } else {
                withdrawBtn.disabled = true;
                withdrawBtn.textContent = `Çekim Yapmak İçin ${(appData.settings.minWithdraw - appState.balance).toFixed(3)} USDT'ye Ulaş`;
            }
            
            // Referans view'ını güncelle
            document.getElementById('referralCountDisplay').textContent = appState.referralCount;
            document.getElementById('referralBonusDisplay').textContent = `USDT ${appState.referralBonus.toFixed(3)}`;
            document.getElementById('userReferralCode').textContent = appState.userReferralCode;
            document.getElementById('userReferralLink').textContent = `${window.location.origin}${window.location.pathname}?ref=${appState.userReferralCode}`;
            
            // Görevler view'ını güncelle
            document.getElementById('completedTasks').textContent = appState.completedTasks;
            document.getElementById('taskEarnings').textContent = `USDT ${appState.taskEarnings.toFixed(3)}`;
            
            // TON dönüşümlerini güncelle
            if (appState.tonPrice > 0) {
                updateTonConversions();
            }
            
            // Final para çekme butonunu güncelle
            const finalWithdrawBtn = document.getElementById('finalWithdrawBtn');
            const paymentAddress = document.getElementById('paymentAddress').value;
            
            if (appState.balance >= appData.settings.minWithdraw && paymentAddress && paymentAddress.length > 10) {
                finalWithdrawBtn.disabled = false;
            } else {
                finalWithdrawBtn.disabled = true;
            }
            
            // Reklam butonunu güncelle
            const rewardedBtn = document.getElementById('rewardedBtn');
            if (appState.dailyAdCount >= 100) {
                rewardedBtn.disabled = true;
                rewardedBtn.textContent = 'Günlük Limit Doldu';
            } else {
                rewardedBtn.disabled = false;
                rewardedBtn.textContent = `Reklam İzle (+${appData.settings.adReward} USDT)`;
            }
        }
        
        // Durum mesajı göster
        function showStatus(message, type = 'info') {
            const statusElement = document.getElementById('statusMessage');
            statusElement.textContent = message;
            statusElement.className = `status-message ${type}`;
            statusElement.style.display = 'block';
            
            setTimeout(() => {
                statusElement.style.display = 'none';
            }, 5000);
        }
        
        // View değiştir
        function switchView(viewId) {
            // Tüm view'ları gizle
            document.querySelectorAll('.view').forEach(view => {
                view.style.display = 'none';
            });
            
            // Seçilen view'ı göster
            document.getElementById(viewId).style.display = 'block';
            
            // Nav butonlarını güncelle
            document.querySelectorAll('.nav-btn').forEach(btn => {
                btn.classList.remove('active');
            });
            
            const activeBtn = document.querySelector(`.nav-btn[data-view="${viewId}"]`);
            if (activeBtn) {
                activeBtn.classList.add('active');
            }
            
            // Özel view işlemleri
            if (viewId === 'admin-view') {
                loadAdminData();
            } else if (viewId === 'tasks-view') {
                loadTasks();
            }
        }
        
        // Sayfa yüklendiğinde
        document.addEventListener('DOMContentLoaded', async function() {
            // Kullanıcıyı başlat
            await initializeUser();
            
            // Event listener'ları ekle
            setupEventListeners();
            
            showStatus(`Hoş geldiniz!`, 'success');
        });
        
        // Event listener'ları kur
        function setupEventListeners() {
            // Nav butonları
            document.querySelectorAll('.nav-btn').forEach(btn => {
                btn.addEventListener('click', function() {
                    const viewId = this.getAttribute('data-view');
                    switchView(viewId);
                });
            });
            
            // Admin header butonu
            document.getElementById('adminHeaderBtn').addEventListener('click', function() {
                switchView('admin-view');
            });
            
            // Ödüllü reklam butonu
            document.getElementById('rewardedBtn').addEventListener('click', function() {
                showRewardedAd();
            });
            
            // Ana para çekme butonu
            document.getElementById('mainWithdrawBtn').addEventListener('click', function() {
                if (appState.balance >= appData.settings.minWithdraw) {
                    switchView('withdraw-view');
                }
            });
            
            // Final para çekme butonu
            document.getElementById('finalWithdrawBtn').addEventListener('click', function() {
                processWithdrawal();
            });
            
            // Ödeme adresi değişikliği
            document.getElementById('paymentAddress').addEventListener('input', function() {
                appState.paymentAddress = this.value;
                localStorage.setItem('torreadds_payment_address', this.value);
                updateUI();
            });
            
            // Referans kodunu gönder butonu
            document.getElementById('submitReferralBtn').addEventListener('click', function() {
                const referralCode = document.getElementById('referralCodeInput').value.trim().toUpperCase();
                if (referralCode) {
                    applyReferralCode(referralCode);
                } else {
                    showStatus('Lütfen bir referans kodu girin.', 'error');
                }
            });
            
            // Referans kodu kopyalama
            document.getElementById('referralCodeBox').addEventListener('click', function() {
                const code = document.getElementById('userReferralCode').textContent;
                navigator.clipboard.writeText(code).then(() => {
                    showStatus('Referans kodu panoya kopyalandı!', 'success');
                });
            });
            
            // Referans linki kopyalama
            document.getElementById('referralLinkBox').addEventListener('click', function() {
                const link = document.getElementById('userReferralLink').textContent;
                navigator.clipboard.writeText(link).then(() => {
                    showStatus('Referans linki panoya kopyalandı!', 'success');
                });
            });
            
            // Admin kontrolleri
            document.getElementById('searchUserBtn').addEventListener('click', function() {
                searchUser();
            });
            
            document.getElementById('adminAddTaskBtn').addEventListener('click', function() {
                addAdminTask();
            });
            
            document.getElementById('resetAdsBtn').addEventListener('click', function() {
                resetDailyAds();
            });
            
            document.getElementById('updateRewardsBtn').addEventListener('click', function() {
                updateRewards();
            });
            
            document.getElementById('clearDataBtn').addEventListener('click', function() {
                clearAllData();
            });
        }
        
        // Ödüllü reklam göster
        async function showRewardedAd() {
            const btn = document.getElementById('rewardedBtn');
            btn.classList.add('btn-loading');
            btn.disabled = true;
            
            // Günlük reklam limitini kontrol et
            if (appState.dailyAdCount >= 100) {
                showStatus('Bugünlük reklam limitine ulaştınız. Yarın tekrar deneyin.', 'error');
                btn.classList.remove('btn-loading');
                btn.disabled = false;
                return;
            }
            
            // Son reklam zamanını kontrol et (10 saniye bekleme süresi)
            const now = Date.now();
            if (now - appState.lastAdTime < 10000) {
                const remainingTime = Math.ceil((10000 - (now - appState.lastAdTime)) / 1000);
                showStatus(`Lütfen ${remainingTime} saniye bekleyin.`, 'error');
                btn.classList.remove('btn-loading');
                btn.disabled = false;
                return;
            }
            
            try {
                // GigaPub reklamını göster
                if (typeof window.showGiga !== 'undefined') {
                    await window.showGiga("main");
                } else {
                    // GigaPub yoksa simüle et (test için)
                    await new Promise(resolve => setTimeout(resolve, 2000));
                }
                
                // Ödülü ver
                appState.balance += appData.settings.adReward;
                appState.adCount += 1;
                appState.dailyAdCount += 1;
                appState.lastAdTime = Date.now();
                
                // Veriyi kaydet
                await saveUserData();
                
                // UI'ı güncelle
                updateUI();
                
                showStatus(`Tebrikler! +${appData.settings.adReward} USDT kazandınız.`, 'success');
                
            } catch (error) {
                console.error('Reklam hatası:', error);
                showStatus('Reklam yüklenirken bir hata oluştu. Lütfen tekrar deneyin.', 'error');
            } finally {
                btn.classList.remove('btn-loading');
                btn.disabled = false;
            }
        }
        
        // Para çekme işlemi
        async function processWithdrawal() {
            const paymentAddress = document.getElementById('paymentAddress').value.trim();
            
            if (!paymentAddress) {
                showStatus('Lütfen TON cüzdan adresinizi girin.', 'error');
                return;
            }
            
            if (appState.balance < appData.settings.minWithdraw) {
                showStatus(`Minimum çekim miktarı ${appData.settings.minWithdraw} USDT'dir.`, 'error');
                return;
            }
            
            const btn = document.getElementById('finalWithdrawBtn');
            btn.classList.add('btn-loading');
            btn.disabled = true;
            
            try {
                // Çekim talebini kaydet
                const withdrawalAmount = appState.balance;
                const tonAmount = withdrawalAmount / appState.tonPrice;
                
                const withdrawal = {
                    userId: appState.userId,
                    amount: withdrawalAmount,
                    tonAmount: tonAmount,
                    paymentAddress: paymentAddress,
                    status: 'pending',
                    date: new Date().toISOString()
                };
                
                appData.withdrawals.push(withdrawal);
                
                // Bakiyeyi sıfırla
                appState.balance = 0;
                
                // Veriyi kaydet
                await saveUserData();
                
                // UI'ı güncelle
                updateUI();
                
                showStatus(`Çekim talebiniz alındı! ${withdrawalAmount.toFixed(3)} USDT (${tonAmount.toFixed(6)} TON) ${paymentAddress} adresine gönderilecek.`, 'success');
                
                // Ana sayfaya dön
                setTimeout(() => {
                    switchView('home-view');
                }, 3000);
                
            } catch (error) {
                console.error('Çekim hatası:', error);
                showStatus('Çekim işlemi sırasında bir hata oluştu. Lütfen tekrar deneyin.', 'error');
            } finally {
                btn.classList.remove('btn-loading');
                btn.disabled = false;
            }
        }
        
        // Admin verilerini yükle
        async function loadAdminData() {
            // Genel istatistikler
            document.getElementById('totalUsers').textContent = Object.keys(appData.users).length;
            document.getElementById('totalAds').textContent = Object.values(appData.users).reduce((sum, user) => sum + (user.adCount || 0), 0);
            document.getElementById('totalWithdrawals').textContent = appData.withdrawals.length;
            document.getElementById('totalBalance').textContent = `USDT ${Object.values(appData.users).reduce((sum, user) => sum + (user.balance || 0), 0).toFixed(2)}`;
            
            // Kullanıcı listesi
            const adminUserList = document.getElementById('adminUserList');
            adminUserList.innerHTML = '';
            
            for (const [userId, user] of Object.entries(appData.users)) {
                const userItem = document.createElement('div');
                userItem.className = 'admin-user-item';
                userItem.innerHTML = `
                    <div class="admin-user-info">
                        <div class="admin-user-id">${userId}</div>
                        <div class="admin-user-balance">Bakiye: USDT ${(user.balance || 0).toFixed(3)} | Reklam: ${user.adCount || 0} | Referans: ${user.referralCount || 0}</div>
                    </div>
                    <div class="admin-user-actions">
                        <button class="admin-action-btn" onclick="adminAddBalance('${userId}', 0.01)">+0.01</button>
                        <button class="admin-action-btn" onclick="adminAddBalance('${userId}', 0.1)">+0.1</button>
                        <button class="admin-action-btn" onclick="adminResetUser('${userId}')">Sıfırla</button>
                    </div>
                `;
                adminUserList.appendChild(userItem);
            }
            
            // Görev listesi
            const adminTasksList = document.getElementById('adminTasksList');
            adminTasksList.innerHTML = '';
            
            appData.tasks.forEach((task, index) => {
                const taskItem = document.createElement('div');
                taskItem.className = 'task-item';
                taskItem.innerHTML = `
                    <div class="task-info">
                        <div class="task-title">${task.title}</div>
                        <div class="task-description">${task.description}</div>
                        <div class="task-reward">Ödül: USDT ${task.reward}</div>
                    </div>
                    <button class="task-btn" onclick="adminRemoveTask(${index})">Sil</button>
                `;
                adminTasksList.appendChild(taskItem);
            });
            
            // Çekim talepleri
            const withdrawRequestsList = document.getElementById('withdrawRequestsList');
            withdrawRequestsList.innerHTML = '';
            
            const pendingWithdrawals = appData.withdrawals.filter(w => w.status === 'pending');
            
            if (pendingWithdrawals.length === 0) {
                withdrawRequestsList.innerHTML = '<p>Bekleyen çekim talebi yok.</p>';
            } else {
                pendingWithdrawals.forEach((withdrawal, index) => {
                    const requestItem = document.createElement('div');
                    requestItem.className = 'withdraw-request-item';
                    requestItem.innerHTML = `
                        <div class="withdraw-request-info">
                            <div class="withdraw-request-user">Kullanıcı: ${withdrawal.userId}</div>
                            <div class="withdraw-request-details">
                                Miktar: USDT ${withdrawal.amount.toFixed(3)} (${withdrawal.tonAmount.toFixed(6)} TON)<br>
                                Adres: ${withdrawal.paymentAddress}<br>
                                Tarih: ${new Date(withdrawal.date).toLocaleString()}
                            </div>
                        </div>
                        <div class="withdraw-request-actions">
                            <button class="withdraw-action-btn approve" onclick="adminProcessWithdrawal(${index}, 'approved')">Onayla</button>
                            <button class="withdraw-action-btn reject" onclick="adminProcessWithdrawal(${index}, 'rejected')">Reddet</button>
                        </div>
                    `;
                    withdrawRequestsList.appendChild(requestItem);
                });
            }
        }
        
        // Kullanıcı ara
        function searchUser() {
            const searchTerm = document.getElementById('userSearch').value.trim();
            if (!searchTerm) return;
            
            const adminUserList = document.getElementById('adminUserList');
            adminUserList.innerHTML = '';
            
            let found = false;
            
            for (const [userId, user] of Object.entries(appData.users)) {
                if (userId.includes(searchTerm) || (user.referralCode && user.referralCode.includes(searchTerm))) {
                    found = true;
                    
                    const userItem = document.createElement('div');
                    userItem.className = 'admin-user-item';
                    userItem.innerHTML = `
                        <div class="admin-user-info">
                            <div class="admin-user-id">${userId}</div>
                            <div class="admin-user-balance">Bakiye: USDT ${(user.balance || 0).toFixed(3)} | Reklam: ${user.adCount || 0} | Referans: ${user.referralCount || 0}</div>
                        </div>
                        <div class="admin-user-actions">
                            <button class="admin-action-btn" onclick="adminAddBalance('${userId}', 0.01)">+0.01</button>
                            <button class="admin-action-btn" onclick="adminAddBalance('${userId}', 0.1)">+0.1</button>
                            <button class="admin-action-btn" onclick="adminResetUser('${userId}')">Sıfırla</button>
                        </div>
                    `;
                    adminUserList.appendChild(userItem);
                }
            }
            
            if (!found) {
                adminUserList.innerHTML = '<p>Kullanıcı bulunamadı.</p>';
            }
        }
        
        // Admin: Kullanıcı bakiyesine ekle
        async function adminAddBalance(userId, amount) {
            if (appData.users[userId]) {
                appData.users[userId].balance = (appData.users[userId].balance || 0) + amount;
                
                // Eğer mevcut kullanıcıysa, state'i de güncelle
                if (userId === appState.userId) {
                    appState.balance += amount;
                }
                
                await saveData();
                
                showStatus(`${userId} kullanıcısına USDT ${amount} eklendi.`, 'success');
                loadAdminData();
                updateUI();
            }
        }
        
        // Admin: Kullanıcıyı sıfırla
        async function adminResetUser(userId) {
            if (confirm(`${userId} kullanıcısını sıfırlamak istediğinizden emin misiniz?`)) {
                if (appData.users[userId]) {
                    appData.users[userId].balance = 0;
                    appData.users[userId].adCount = 0;
                    appData.users[userId].dailyAdCount = 0;
                    appData.users[userId].referralCount = 0;
                    appData.users[userId].referralBonus = 0;
                    appData.users[userId].completedTasks = 0;
                    appData.users[userId].taskEarnings = 0;
                    
                    // Eğer mevcut kullanıcıysa, state'i de sıfırla
                    if (userId === appState.userId) {
                        appState.balance = 0;
                        appState.adCount = 0;
                        appState.dailyAdCount = 0;
                        appState.referralCount = 0;
                        appState.referralBonus = 0;
                        appState.completedTasks = 0;
                        appState.taskEarnings = 0;
                    }
                    
                    await saveData();
                    
                    showStatus(`${userId} kullanıcısı sıfırlandı.`, 'success');
                    loadAdminData();
                    updateUI();
                }
            }
        }
        
        // Admin: Görev ekle
        async function addAdminTask() {
            const title = document.getElementById('adminTaskTitle').value.trim();
            const description = document.getElementById('adminTaskDescription').value.trim();
            const link = document.getElementById('adminTaskLink').value.trim();
            const reward = parseFloat(document.getElementById('adminTaskReward').value);
            
            if (!title || !description || !link || isNaN(reward) || reward <= 0) {
                showStatus('Lütfen tüm alanları doğru şekilde doldurun.', 'error');
                return;
            }
            
            appData.tasks.push({
                title,
                description,
                link,
                reward,
                created: new Date().toISOString()
            });
            
            await saveData();
            
            // Formu temizle
            document.getElementById('adminTaskTitle').value = '';
            document.getElementById('adminTaskDescription').value = '';
            document.getElementById('adminTaskLink').value = '';
            document.getElementById('adminTaskReward').value = '0.005';
            
            showStatus('Görev başarıyla eklendi.', 'success');
            loadAdminData();
        }
        
        // Admin: Görev sil
        async function adminRemoveTask(index) {
            if (confirm('Bu görevi silmek istediğinizden emin misiniz?')) {
                appData.tasks.splice(index, 1);
                await saveData();
                
                showStatus('Görev silindi.', 'success');
                loadAdminData();
            }
        }
        
        // Admin: Çekim talebini işle
        async function adminProcessWithdrawal(index, status) {
            if (appData.withdrawals[index]) {
                appData.withdrawals[index].status = status;
                appData.withdrawals[index].processedDate = new Date().toISOString();
                
                await saveData();
                
                showStatus(`Çekim talebi ${status === 'approved' ? 'onaylandı' : 'reddedildi'}.`, 'success');
                loadAdminData();
            }
        }
        
        // Admin: Günlük reklamları sıfırla
        async function resetDailyAds() {
            for (const userId in appData.users) {
                appData.users[userId].dailyAdCount = 0;
                
                // Eğer mevcut kullanıcıysa, state'i de sıfırla
                if (userId === appState.userId) {
                    appState.dailyAdCount = 0;
                }
            }
            
            localStorage.setItem('torreadds_last_reset', new Date().toDateString());
            
            await saveData();
            
            showStatus('Tüm kullanıcıların günlük reklam sayıları sıfırlandı.', 'success');
            loadAdminData();
            updateUI();
        }
        
        // Admin: Ödülleri güncelle
        async function updateRewards() {
            const newAdReward = parseFloat(prompt('Yeni reklam ödülü (USDT):', appData.settings.adReward));
            const newReferralReward = parseFloat(prompt('Yeni referans ödülü (USDT):', appData.settings.referralReward));
            const newMinWithdraw = parseFloat(prompt('Yeni minimum çekim miktarı (USDT):', appData.settings.minWithdraw));
            
            if (!isNaN(newAdReward) && newAdReward > 0) appData.settings.adReward = newAdReward;
            if (!isNaN(newReferralReward) && newReferralReward > 0) appData.settings.referralReward = newReferralReward;
            if (!isNaN(newMinWithdraw) && newMinWithdraw > 0) appData.settings.minWithdraw = newMinWithdraw;
            
            await saveData();
            
            showStatus('Ödüller güncellendi.', 'success');
            updateUI();
        }
        
        // Admin: Tüm verileri temizle
        async function clearAllData() {
            if (confirm('TÜM verileri temizlemek istediğinizden emin misiniz? Bu işlem geri alınamaz!')) {
                appData = {
                    users: {},
                    tasks: [],
                    withdrawals: [],
                    settings: {
                        adReward: 0.001,
                        minWithdraw: 0.50,
                        referralReward: 0.02
                    }
                };
                
                // Mevcut kullanıcıyı koru
                if (appState.userId) {
                    appData.users[appState.userId] = {
                        balance: 0,
                        adCount: 0,
                        dailyAdCount: 0,
                        referralCount: 0,
                        referralBonus: 0,
                        completedTasks: 0,
                        taskEarnings: 0,
                        referralCode: appState.userReferralCode,
                        joinDate: new Date().toISOString(),
                        paymentAddress: appState.paymentAddress
                    };
                    
                    // State'i sıfırla
                    appState.balance = 0;
                    appState.adCount = 0;
                    appState.dailyAdCount = 0;
                    appState.referralCount = 0;
                    appState.referralBonus = 0;
                    appState.completedTasks = 0;
                    appState.taskEarnings = 0;
                }
                
                await saveData();
                
                showStatus('Tüm veriler temizlendi.', 'success');
                loadAdminData();
                updateUI();
            }
        }
        
        // Görevleri yükle
        function loadTasks() {
            const manualTasksList = document.getElementById('manualTasksList');
            manualTasksList.innerHTML = '';
            
            if (appData.tasks.length === 0) {
                manualTasksList.innerHTML = '<p>Şu anda mevcut görev yok. Yakında yeni görevler eklenecek!</p>';
            } else {
                appData.tasks.forEach((task, index) => {
                    const taskItem = document.createElement('div');
                    taskItem.className = 'task-item';
                    taskItem.innerHTML = `
                        <div class="task-info">
                            <div class="task-title">${task.title}</div>
                            <div class="task-description">${task.description}</div>
                            <div class="task-reward">Ödül: USDT ${task.reward}</div>
                        </div>
                        <button class="task-btn" onclick="completeTask(${index})">Tamamla</button>
                    `;
                    manualTasksList.appendChild(taskItem);
                });
            }
        }
        
        // Görevi tamamla
        async function completeTask(index) {
            if (appData.tasks[index]) {
                const task = appData.tasks[index];
                
                // Görev linkini aç
                window.open(task.link, '_blank');
                
                // Ödülü ver
                appState.balance += task.reward;
                appState.completedTasks += 1;
                appState.taskEarnings += task.reward;
                
                // Veriyi kaydet
                await saveUserData();
                
                // UI'ı güncelle
                updateUI();
                
                showStatus(`Tebrikler! Görevi tamamladınız ve USDT ${task.reward} kazandınız.`, 'success');
            }
        }
        
        // Global fonksiyonlar
        window.adminAddBalance = adminAddBalance;
        window.adminResetUser = adminResetUser;
        window.adminRemoveTask = adminRemoveTask;
        window.adminProcessWithdrawal = adminProcessWithdrawal;
        window.completeTask = completeTask;
        
        // TON fiyatını periyodik olarak güncelle (5 dakikada bir)
        setInterval(fetchTonPrice, 5 * 60 * 1000);
    </script>
</body>
</html>
